{
  "abi": [
    {
      "inputs": [],
      "name": "ERC721AddressZeroIsNotaValidOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApprovalToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApproveCallerIsNotOwnerNorApprovedForAll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ApproveToCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721InvalidTokenId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferToNonReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferToTheZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKApprovalForAssetsToCurrentOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKAssetAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKBadPriorityListLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKCatalogRequiredForParts",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKChildAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKChildIndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKEquippableEquipNotAllowedByCatalog",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKIdZeroForbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKIndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKIsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKMaxPendingAssetsReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKMaxPendingChildrenReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "childContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "RMRKMaxRecursiveBurnsReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKMustUnequipFirst",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNestableTooDeep",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNestableTransferToDescendant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNestableTransferToNonRMRKNestableImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNestableTransferToSelf",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNewContributorIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNewOwnerIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNoAssetMatchingId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNotApprovedForAssetsOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNotApprovedOrDirectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNotEquipped",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKNotOwnerOrContributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKPendingChildIndexOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKRoyaltiesTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKSlotAlreadyUsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKTargetAssetCannotReceiveSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKTokenCannotBeEquippedWithAssetIntoSlot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKTokenDoesNotHaveAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKUnexpectedAssetId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKUnexpectedChildId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKUnexpectedNumberOfAssets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RMRKUnexpectedNumberOfChildren",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AllChildrenRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAllForAssets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ApprovalForAssets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "replacesId",
          "type": "uint64"
        }
      ],
      "name": "AssetAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "replacesId",
          "type": "uint64"
        }
      ],
      "name": "AssetAddedToTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "AssetPrioritySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "AssetRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "AssetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "ChildAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "slotPartId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "childAssetId",
          "type": "uint64"
        }
      ],
      "name": "ChildAssetEquipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "slotPartId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "childAssetId",
          "type": "uint64"
        }
      ],
      "name": "ChildAssetUnequipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "ChildProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromPending",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "toZero",
          "type": "bool"
        }
      ],
      "name": "ChildTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isContributor",
          "type": "bool"
        }
      ],
      "name": "ContributorUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NestTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "equippableGroupId",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "slotPartId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "parentAddress",
          "type": "address"
        }
      ],
      "name": "ValidParentEquippableGroupIdSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RMRK_INTERFACE",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "acceptAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "acceptChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "addAssetEntry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "replacesAssetWithId",
          "type": "uint64"
        }
      ],
      "name": "addAssetToToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "addChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "equippableGroupId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "catalogAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        },
        {
          "internalType": "uint64[]",
          "name": "partIds",
          "type": "uint64[]"
        }
      ],
      "name": "addEquippableAssetEntry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approveForAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxChildrenBurns",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "parent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "slotId",
          "type": "uint64"
        }
      ],
      "name": "canTokenBeEquippedWithAssetIntoSlot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "childOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC7401.Child",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        }
      ],
      "name": "childrenOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC7401.Child[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectionMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "directOwnerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "childIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotPartId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "childAssetId",
              "type": "uint64"
            }
          ],
          "internalType": "struct IERC6220.IntakeEquip",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "equip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getActiveAssetPriorities",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getActiveAssets",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApprovedForAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "getAssetAndEquippableData",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "getAssetMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "newAssetId",
          "type": "uint64"
        }
      ],
      "name": "getAssetReplacements",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "targetCatalogAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "slotPartId",
          "type": "uint64"
        }
      ],
      "name": "getEquipment",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "childAssetId",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "childEquippableAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC6220.Equipment",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPendingAssets",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoyaltyPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoyaltyRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAllForAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        }
      ],
      "name": "isChildEquipped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        }
      ],
      "name": "isContributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contributor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "grantRole",
          "type": "bool"
        }
      ],
      "name": "manageContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destinationId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "nestTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "pendingChildOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC7401.Child",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentId",
          "type": "uint256"
        }
      ],
      "name": "pendingChildrenOf",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IERC7401.Child[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRejections",
          "type": "uint256"
        }
      ],
      "name": "rejectAllAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxRejections",
          "type": "uint256"
        }
      ],
      "name": "rejectAllChildren",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        }
      ],
      "name": "rejectAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllForAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64[]",
          "name": "priorities",
          "type": "uint64[]"
        }
      ],
      "name": "setPriority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "equippableGroupId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "parentAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "partId",
          "type": "uint64"
        }
      ],
      "name": "setValidParentForEquippableGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "destinationId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "childIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "childId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPending",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "assetId",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "slotPartId",
          "type": "uint64"
        }
      ],
      "name": "unequip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRoyaltyRecipient",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "RMRK_INTERFACE()": "8d4f3bf5",
    "VERSION()": "ffa1ad74",
    "acceptAsset(uint256,uint256,uint64)": "fc3517c8",
    "acceptChild(uint256,uint256,address,uint256)": "e97ceaa8",
    "addAssetEntry(string)": "30ffb1d6",
    "addAssetToToken(uint256,uint64,uint64)": "1c7bb461",
    "addChild(uint256,uint256,bytes)": "635490cc",
    "addEquippableAssetEntry(uint64,address,string,uint64[])": "2452cd91",
    "approve(address,uint256)": "095ea7b3",
    "approveForAssets(address,uint256)": "5ea72f36",
    "balanceOf(address)": "70a08231",
    "burn(uint256)": "42966c68",
    "burn(uint256,uint256)": "b390c0ab",
    "canTokenBeEquippedWithAssetIntoSlot(address,uint256,uint64,uint64)": "074334fb",
    "childOf(uint256,uint256)": "2f32f937",
    "childrenOf(uint256)": "6f19951c",
    "collectionMetadata()": "89ed2edf",
    "directOwnerOf(uint256)": "fb25fb7a",
    "equip((uint256,uint256,uint64,uint64,uint64))": "38dcf74c",
    "getActiveAssetPriorities(uint256)": "5e94354a",
    "getActiveAssets(uint256)": "7280281e",
    "getApproved(uint256)": "081812fc",
    "getApprovedForAssets(uint256)": "e467a48f",
    "getAssetAndEquippableData(uint256,uint64)": "4e60edba",
    "getAssetMetadata(uint256,uint64)": "5e2e3292",
    "getAssetReplacements(uint256,uint64)": "df6f556b",
    "getEquipment(uint256,address,uint64)": "7507e2ae",
    "getPendingAssets(uint256)": "51532e5a",
    "getRoyaltyPercentage()": "59c8b7dd",
    "getRoyaltyRecipient()": "95edc18c",
    "isApprovedForAll(address,address)": "e985e9c5",
    "isApprovedForAllForAssets(address,address)": "22e6d160",
    "isChildEquipped(uint256,address,uint256)": "ee1dffcf",
    "isContributor(address)": "1d0d35f5",
    "manageContributor(address,bool)": "79e8ca9e",
    "maxSupply()": "d5abeb01",
    "name()": "06fdde03",
    "nestTransferFrom(address,address,uint256,uint256,bytes)": "064c0a3a",
    "owner()": "8da5cb5b",
    "ownerOf(uint256)": "6352211e",
    "pendingChildOf(uint256,uint256)": "a898e364",
    "pendingChildrenOf(uint256)": "44ec9344",
    "rejectAllAssets(uint256,uint256)": "e7de4de4",
    "rejectAllChildren(uint256,uint256)": "97961336",
    "rejectAsset(uint256,uint256,uint64)": "22f6da9c",
    "renounceOwnership()": "715018a6",
    "royaltyInfo(uint256,uint256)": "2a55205a",
    "safeTransferFrom(address,address,uint256)": "42842e0e",
    "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
    "setApprovalForAll(address,bool)": "a22cb465",
    "setApprovalForAllForAssets(address,bool)": "8507dc28",
    "setPriority(uint256,uint64[])": "de8e602c",
    "setValidParentForEquippableGroup(uint64,address,uint64)": "65b67eb9",
    "supportsInterface(bytes4)": "01ffc9a7",
    "symbol()": "95d89b41",
    "totalAssets()": "01e1d114",
    "totalSupply()": "18160ddd",
    "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": "defa80c3",
    "transferFrom(address,address,uint256)": "23b872dd",
    "transferOwnership(address)": "f2fde38b",
    "unequip(uint256,uint64,uint64)": "c259a988",
    "updateRoyaltyRecipient(address)": "0fc499f5"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ERC721AddressZeroIsNotaValidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApproveCallerIsNotOwnerNorApprovedForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToNonReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKApprovalForAssetsToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKAssetAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKBadPriorityListLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKCatalogRequiredForParts\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKChildAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKChildIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKEquippableEquipNotAllowedByCatalog\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKIdZeroForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKMaxPendingAssetsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKMaxPendingChildrenReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"RMRKMaxRecursiveBurnsReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKMustUnequipFirst\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNestableTooDeep\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNestableTransferToDescendant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNestableTransferToNonRMRKNestableImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNestableTransferToSelf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNewContributorIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNewOwnerIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNoAssetMatchingId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotApprovedForAssetsOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotApprovedOrDirectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotEquipped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKNotOwnerOrContributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKPendingChildIndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKRoyaltiesTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKSlotAlreadyUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKTargetAssetCannotReceiveSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKTokenCannotBeEquippedWithAssetIntoSlot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKTokenDoesNotHaveAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKUnexpectedAssetId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKUnexpectedChildId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKUnexpectedNumberOfAssets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RMRKUnexpectedNumberOfChildren\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AllChildrenRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAllForAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ApprovalForAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"replacesId\",\"type\":\"uint64\"}],\"name\":\"AssetAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"replacesId\",\"type\":\"uint64\"}],\"name\":\"AssetAddedToTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AssetPrioritySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"AssetRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"AssetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"ChildAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"slotPartId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"childAssetId\",\"type\":\"uint64\"}],\"name\":\"ChildAssetEquipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"slotPartId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"childAssetId\",\"type\":\"uint64\"}],\"name\":\"ChildAssetUnequipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"ChildProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromPending\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"toZero\",\"type\":\"bool\"}],\"name\":\"ChildTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isContributor\",\"type\":\"bool\"}],\"name\":\"ContributorUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NestTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"equippableGroupId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"slotPartId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"}],\"name\":\"ValidParentEquippableGroupIdSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RMRK_INTERFACE\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"acceptAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"acceptChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"addAssetEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"replacesAssetWithId\",\"type\":\"uint64\"}],\"name\":\"addAssetToToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"addChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"equippableGroupId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"catalogAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"uint64[]\",\"name\":\"partIds\",\"type\":\"uint64[]\"}],\"name\":\"addEquippableAssetEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveForAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxChildrenBurns\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotId\",\"type\":\"uint64\"}],\"name\":\"canTokenBeEquippedWithAssetIntoSlot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"childOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC7401.Child\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"childrenOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC7401.Child[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"directOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotPartId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childAssetId\",\"type\":\"uint64\"}],\"internalType\":\"struct IERC6220.IntakeEquip\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"equip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getActiveAssetPriorities\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getActiveAssets\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApprovedForAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"getAssetAndEquippableData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"getAssetMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"newAssetId\",\"type\":\"uint64\"}],\"name\":\"getAssetReplacements\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"targetCatalogAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"slotPartId\",\"type\":\"uint64\"}],\"name\":\"getEquipment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"childAssetId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childEquippableAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC6220.Equipment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPendingAssets\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAllForAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"}],\"name\":\"isChildEquipped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"}],\"name\":\"isContributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contributor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"grantRole\",\"type\":\"bool\"}],\"name\":\"manageContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"nestTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pendingChildOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC7401.Child\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"}],\"name\":\"pendingChildrenOf\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"internalType\":\"struct IERC7401.Child[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRejections\",\"type\":\"uint256\"}],\"name\":\"rejectAllAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxRejections\",\"type\":\"uint256\"}],\"name\":\"rejectAllChildren\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"}],\"name\":\"rejectAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllForAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64[]\",\"name\":\"priorities\",\"type\":\"uint64[]\"}],\"name\":\"setPriority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"equippableGroupId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"partId\",\"type\":\"uint64\"}],\"name\":\"setValidParentForEquippableGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"childIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"childId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPending\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"assetId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"slotPartId\",\"type\":\"uint64\"}],\"name\":\"unequip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRoyaltyRecipient\",\"type\":\"address\"}],\"name\":\"updateRoyaltyRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"RMRK team\",\"errors\":{\"RMRKIdZeroForbidden()\":[{\"details\":\"The ID 0 in RMRK suite is reserved for empty values. Guarding against its use ensures the expected operation\"}],\"RMRKMaxRecursiveBurnsReached(address,uint256)\":[{\"params\":{\"childContract\":\"Address of the collection smart contract in which the maximum number of recursive burns was reached\",\"childId\":\"ID of the child token at which the maximum number of recursive burns was reached\"}}],\"RMRKNotApprovedOrDirectOwner()\":[{\"details\":\"When a token is nested, only the direct owner (NFT parent) can mange it. In that case, approved addresses are  not allowed to manage it, in order to ensure the expected behaviour\"}]},\"events\":{\"AllChildrenRejected(uint256)\":{\"details\":\"Emitted when a token removes all a child tokens from its pending array.\",\"params\":{\"tokenId\":\"ID of the token that rejected all of the pending children\"}},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"ApprovalForAllForAssets(address,address,bool)\":{\"params\":{\"approved\":\"Boolean value signifying whether the permission has been granted (`true`) or revoked (`false`)\",\"operator\":\"Address of the account that has been granted the approval to manage the token's assets on all of  the tokens\",\"owner\":\"Address of the account that has granted the approval for all assets on all of their tokens\"}},\"ApprovalForAssets(address,address,uint256)\":{\"details\":\"Approvals must be cleared on transfer\",\"params\":{\"approved\":\"Address of the account that has been granted approval to manage the token's assets\",\"owner\":\"Address of the account that has granted the approval for all token's assets\",\"tokenId\":\"ID of the token on which the approval was granted\"}},\"AssetAccepted(uint256,uint64,uint64)\":{\"params\":{\"assetId\":\"ID of the asset that was accepted\",\"replacesId\":\"ID of the asset that was replaced\",\"tokenId\":\"ID of the token that had a new asset accepted\"}},\"AssetAddedToTokens(uint256[],uint64,uint64)\":{\"params\":{\"assetId\":\"ID of the asset that has been added to the token's pending assets array\",\"replacesId\":\"ID of the asset that would be replaced\",\"tokenIds\":\"An array of token IDs that received a new pending asset\"}},\"AssetPrioritySet(uint256)\":{\"params\":{\"tokenId\":\"ID of the token that had the asset priority array updated\"}},\"AssetRejected(uint256,uint64)\":{\"params\":{\"assetId\":\"ID of the asset that was rejected\",\"tokenId\":\"ID of the token that had an asset rejected\"}},\"AssetSet(uint64)\":{\"params\":{\"assetId\":\"ID of the asset that was initialized\"}},\"ChildAccepted(uint256,uint256,address,uint256)\":{\"details\":\"Emitted when a parent token accepts a token from its pending array, migrating it to the active array.\",\"params\":{\"childAddress\":\"Address of the child token's collection smart contract\",\"childId\":\"ID of the child token in the child token's collection smart contract\",\"childIndex\":\"Index of the newly accepted child token in the parent token's active children array\",\"tokenId\":\"ID of the token that accepted a new child token\"}},\"ChildAssetEquipped(uint256,uint64,uint64,uint256,address,uint64)\":{\"params\":{\"assetId\":\"ID of the asset associated with the token we are equipping into\",\"childAddress\":\"Address of the child token's collection\",\"childAssetId\":\"ID of the asset associated with the token we are equipping\",\"childId\":\"ID of the child token we are equipping into the slot\",\"slotPartId\":\"ID of the slot we are using to equip\",\"tokenId\":\"ID of the token that had an asset equipped\"}},\"ChildAssetUnequipped(uint256,uint64,uint64,uint256,address,uint64)\":{\"params\":{\"assetId\":\"ID of the asset associated with the token we are unequipping out of\",\"childAddress\":\"Address of the collection that a token that is being unequipped belongs to\",\"childAssetId\":\"ID of the asset associated with the token we are unequipping\",\"childId\":\"ID of the token being unequipped\",\"slotPartId\":\"ID of the slot we are unequipping from\",\"tokenId\":\"ID of the token that had an asset unequipped\"}},\"ChildProposed(uint256,uint256,address,uint256)\":{\"details\":\"Emitted when a child NFT is added to a token's pending array.\",\"params\":{\"childAddress\":\"Address of the proposed child token's collection smart contract\",\"childId\":\"ID of the child token in the child token's collection smart contract\",\"childIndex\":\"Index of the proposed child token in the parent token's pending children array\",\"tokenId\":\"ID of the token that received a new pending child token\"}},\"ChildTransferred(uint256,uint256,address,uint256,bool,bool)\":{\"details\":\"Emitted when a token transfers a child from itself, transferring ownership to the root owner.\",\"params\":{\"childAddress\":\"Address of the child token's collection smart contract\",\"childId\":\"ID of the child token in the child token's collection smart contract\",\"childIndex\":\"Index of a child in the array from which it is being transferred\",\"fromPending\":\"A boolean value signifying whether the token was in the pending child tokens array (`true`) or  in the active child tokens array (`false`)\",\"toZero\":\"A boolean value signifying whether the token is being transferred to the `0x0` address (`true`) or  not (`false`)\",\"tokenId\":\"ID of the token that transferred a child token\"}},\"ContributorUpdate(address,bool)\":{\"details\":\"This can only be triggered by a current owner, so there is no need to include that information in the event.\",\"params\":{\"contributor\":\"Address of the account that had contributor role status updated\",\"isContributor\":\"A boolean value signifying whether the role has been granted (`true`) or revoked (`false`)\"}},\"NestTransfer(address,address,uint256,uint256,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\",\"params\":{\"from\":\"Address of the previous immediate owner, which is a smart contract if the token was nested.\",\"fromTokenId\":\"ID of the previous parent token. If the token was not nested before, the value should be `0`\",\"to\":\"Address of the new immediate owner, which is a smart contract if the token is being nested.\",\"toTokenId\":\"ID of the new parent token. If the token is not being nested, the value should be `0`\",\"tokenId\":\"ID of the token being transferred\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"Address of the account receiving the ownership role\",\"previousOwner\":\"Address of the account that transferred their ownership role\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"ValidParentEquippableGroupIdSet(uint64,uint64,address)\":{\"params\":{\"equippableGroupId\":\"ID of the equippable group being marked as equippable into the slot associated with  `slotPartId` of the `parentAddress` collection\",\"parentAddress\":\"Address of the collection into which the parts belonging to `equippableGroupId` can be  equipped\",\"slotPartId\":\"ID of the slot part of the catalog into which the parts belonging to the equippable group  associated with `equippableGroupId` can be equipped\"}}},\"kind\":\"dev\",\"methods\":{\"acceptAsset(uint256,uint256,uint64)\":{\"details\":\"Migrates the asset from the token's pending asset array to the token's active asset array.Active assets cannot be removed by anyone, but can be replaced by a new asset.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - `index` must be in range of the length of the pending asset array.Emits an {AssetAccepted} event.\",\"params\":{\"assetId\":\"ID of the asset that is being accepted\",\"index\":\"Index of the asset in the pending array to accept\",\"tokenId\":\"ID of the token for which to accept the pending asset\"}},\"acceptChild(uint256,uint256,address,uint256)\":{\"details\":\"This moves the child token from parent token's pending child tokens array into the active child tokens  array.\",\"params\":{\"childAddress\":\"Address of the collection smart contract of the child token expected to be located at the  specified index of the given parent token's pending children array\",\"childId\":\"ID of the child token expected to be located at the specified index of the given parent token's  pending children array\",\"childIndex\":\"Index of a child tokem in the given parent's pending children array\",\"parentId\":\"ID of the parent token for which the child token is being accepted\"}},\"addAssetEntry(string)\":{\"details\":\"The ID of the asset is automatically assigned to be the next available asset ID.\",\"params\":{\"metadataURI\":\"Metadata URI of the asset\"},\"returns\":{\"_0\":\"ID of the newly added asset\"}},\"addAssetToToken(uint256,uint64,uint64)\":{\"details\":\"If the given asset is already added to the token, the execution will be reverted.If the asset ID is invalid, the execution will be reverted.If the token already has the maximum amount of pending assets (128), the execution will be  reverted.\",\"params\":{\"assetId\":\"ID of the asset to add to the token\",\"replacesAssetWithId\":\"ID of the asset to replace from the token's list of active assets\",\"tokenId\":\"ID of the token to add the asset to\"}},\"addChild(uint256,uint256,bytes)\":{\"details\":\"This adds the child token into the given parent token's pending child tokens array.Requirements:  - `directOwnerOf` on the child contract must resolve to the called contract.  - the pending array of the parent contract must not be full.\",\"params\":{\"childId\":\"ID of the new proposed child token\",\"data\":\"Additional data with no specified format\",\"parentId\":\"ID of the parent token to receive the new child token\"}},\"addEquippableAssetEntry(uint64,address,string,uint64[])\":{\"details\":\"The ID of the asset is automatically assigned to be the next available asset ID.\",\"params\":{\"catalogAddress\":\"Address of the `Catalog` smart contract this asset belongs to\",\"equippableGroupId\":\"ID of the equippable group\",\"metadataURI\":\"Metadata URI of the asset\",\"partIds\":\"An array of IDs of fixed and slot parts to be included in the asset\"},\"returns\":{\"_0\":\"The total number of assets after this asset has been added\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account.The approval is cleared when the token is transferred.Only a single account can be approved at a time, so approving the zero address clears previous approvals.Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist.Emits an {Approval} event.\",\"params\":{\"to\":\"Address receiving the approval\",\"tokenId\":\"ID of the token for which the approval is being granted\"}},\"approveForAssets(address,uint256)\":{\"details\":\"This can only be called by the owner of the token or by an account that has been granted permission to  manage all of the owner's assets.\",\"params\":{\"to\":\"Address of the account to receive the approval to the specified token\",\"tokenId\":\"ID of the token for which we are granting the permission\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"Address of the account being checked\"},\"returns\":{\"_0\":\"The balance of the given account\"}},\"burn(uint256)\":{\"details\":\"In case the token has any child tokens, the execution will be reverted.\",\"params\":{\"tokenId\":\"ID of the token to burn\"}},\"burn(uint256,uint256)\":{\"details\":\"When a token is burned, all of its child tokens are recursively burned as well.When specifying the maximum recursive burns, the execution will be reverted if there are more children to be  burned.Setting the `maxRecursiveBurn` value to 0 will only attempt to burn the specified token and revert if there  are any child tokens present.The approvals are cleared when the token is burned.Requirements:  - `tokenId` must exist.Emits a {Transfer} event.\",\"params\":{\"maxRecursiveBurns\":\"Maximum number of tokens to recursively burn\",\"tokenId\":\"ID of the token to burn\"},\"returns\":{\"_0\":\"Number of recursively burned children\"}},\"canTokenBeEquippedWithAssetIntoSlot(address,uint256,uint64,uint64)\":{\"params\":{\"assetId\":\"ID of the asset associated with the token we want to equip\",\"parent\":\"Address of the parent token's smart contract\",\"slotId\":\"ID of the slot that we want to equip the token into\",\"tokenId\":\"ID of the token we want to equip\"},\"returns\":{\"_0\":\"A boolean indicating whether the token with the given asset can be equipped into the desired slot\"}},\"childOf(uint256,uint256)\":{\"details\":\"Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]\",\"params\":{\"index\":\"Index of the child token in the parent token's active child tokens array\",\"parentId\":\"ID of the parent token for which the child is being retrieved\"},\"returns\":{\"_0\":\"A Child struct containing data about the specified child\"}},\"childrenOf(uint256)\":{\"details\":\"Returns array of Child structs existing for parent token.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]\",\"params\":{\"parentId\":\"ID of the parent token for which to retrieve the active child tokens\"},\"returns\":{\"_0\":\"An array of Child structs containing the parent token's active child tokens\"}},\"collectionMetadata()\":{\"returns\":{\"_0\":\"string The metadata URI of the collection\"}},\"directOwnerOf(uint256)\":{\"details\":\"If the immediate owner is another token, the address returned, should be the one of the parent token's  collection smart contract.\",\"params\":{\"tokenId\":\"ID of the token for which the RMRK owner is being retrieved\"},\"returns\":{\"_0\":\"Address of the given token's owner\",\"_1\":\"The ID of the parent token. Should be `0` if the owner is an externally owned account\",\"_2\":\"The boolean value signifying whether the owner is an NFT or not\"}},\"equip((uint256,uint256,uint64,uint64,uint64))\":{\"details\":\"The `IntakeEquip` stuct contains the following data:  [      tokenId,      childIndex,      assetId,      slotPartId,      childAssetId  ]\",\"params\":{\"data\":\"An `IntakeEquip` struct specifying the equip data\"}},\"getActiveAssetPriorities(uint256)\":{\"details\":\"Asset priorities are a non-sequential array of uint64 values with an array size equal to active asset  priorites.\",\"params\":{\"tokenId\":\"ID of the token for which to retrieve the priorities of the active assets\"},\"returns\":{\"_0\":\"An array of priorities of the active assets of the given token\"}},\"getActiveAssets(uint256)\":{\"details\":\"Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.You can safely get 10k\",\"params\":{\"tokenId\":\"ID of the token to retrieve the IDs of the active assets\"},\"returns\":{\"_0\":\"An array of active asset IDs of the given token\"}},\"getApproved(uint256)\":{\"details\":\"Requirements:  - `tokenId` must exist.\",\"params\":{\"tokenId\":\"ID of the token to check for approval\"},\"returns\":{\"_0\":\"Address of the account approved to manage the token\"}},\"getApprovedForAssets(uint256)\":{\"params\":{\"tokenId\":\"ID of the token we are checking\"},\"returns\":{\"_0\":\"Address of the account that is approved to manage the token\"}},\"getAssetAndEquippableData(uint256,uint64)\":{\"params\":{\"assetId\":\"ID of the asset of which we are retrieving\",\"tokenId\":\"ID of the token for which to retrieve the asset\"},\"returns\":{\"_0\":\"The metadata URI of the asset\",\"_1\":\"ID of the equippable group this asset belongs to\",\"_2\":\"The address of the catalog the part belongs to\",\"_3\":\"An array of IDs of parts included in the asset\"}},\"getAssetMetadata(uint256,uint64)\":{\"details\":\"Assets are stored by reference mapping `_assets[assetId]`.Can be overriden to implement enumerate, fallback or other custom logic.\",\"params\":{\"assetId\":\"Asset Id, must be in the active assets array\",\"tokenId\":\"ID of the token from which to retrieve the asset metadata\"},\"returns\":{\"_0\":\"The metadata of the asset belonging to the specified index in the token's active assets  array\"}},\"getAssetReplacements(uint256,uint64)\":{\"details\":\"Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.\",\"params\":{\"newAssetId\":\"ID of the pending asset which will be accepted\",\"tokenId\":\"ID of the token to check\"},\"returns\":{\"_0\":\"ID of the asset which will be replaced\"}},\"getEquipment(uint256,address,uint64)\":{\"details\":\"The `Equipment` struct consists of the following data:  [      assetId,      childAssetId,      childId,      childEquippableAddress  ]\",\"params\":{\"slotPartId\":\"ID of the `Slot` part that we are checking for equipped objects\",\"targetCatalogAddress\":\"Address of the `Catalog` associated with the `Slot` part of the token\",\"tokenId\":\"ID of the token for which we are retrieving the equipped object\"},\"returns\":{\"_0\":\"The `Equipment` struct containing data about the equipped object\"}},\"getPendingAssets(uint256)\":{\"details\":\"Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.\",\"params\":{\"tokenId\":\"ID of the token to retrieve the IDs of the pending assets\"},\"returns\":{\"_0\":\"An array of pending asset IDs of the given token\"}},\"getRoyaltyPercentage()\":{\"returns\":{\"_0\":\"The royalty percentage expressed in the basis points\"}},\"getRoyaltyRecipient()\":{\"returns\":{\"_0\":\"Address of the recipient of royalties\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address being checked for approval\",\"owner\":\"Address of the owner of the tokens\"},\"returns\":{\"_0\":\"A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)  or not (`false`)\"}},\"isApprovedForAllForAssets(address,address)\":{\"details\":\"See {setApprovalForAllForAssets}.\",\"params\":{\"operator\":\"Address of the account that we are checking whether it has the operator role or not\",\"owner\":\"Address of the account that we are checking for whether it has granted the operator role\"},\"returns\":{\"_0\":\"A boolean value indicating wehter the account we are checking has been granted the operator role\"}},\"isChildEquipped(uint256,address,uint256)\":{\"details\":\"This is used to prevent from transferring a child that is equipped.\",\"params\":{\"childAddress\":\"Address of the child token's smart contract\",\"childId\":\"ID of the child token\",\"tokenId\":\"ID of the parent token for which we are querying for\"},\"returns\":{\"_0\":\"A boolean value indicating whether the child token is equipped into the given token or not\"}},\"isContributor(address)\":{\"params\":{\"contributor\":\"Address of the contributor whose status we are checking\"},\"returns\":{\"_0\":\"Boolean value indicating whether the address is a contributor or not\"}},\"manageContributor(address,bool)\":{\"details\":\"Can only be called by the owner.Emits ***ContributorUpdate*** event.\",\"params\":{\"contributor\":\"Address of the contributor's account\",\"grantRole\":\"A boolean value signifying whether the contributor role is being granted (`true`) or revoked  (`false`)\"}},\"maxSupply()\":{\"returns\":{\"_0\":\"The maximum supply of tokens in the collection\"}},\"name()\":{\"returns\":{\"_0\":\"Name of the collection\"}},\"nestTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"data\":\"Additional data with no specified format, sent in the addChild call\",\"destinationId\":\"ID of the token to receive the token being transferred\",\"from\":\"Address of the direct owner of the token to be transferred\",\"to\":\"Address of the receiving token's collection smart contract\",\"tokenId\":\"ID of the token being transferred\"}},\"owner()\":{\"returns\":{\"_0\":\"Address of the current owner\"}},\"ownerOf(uint256)\":{\"details\":\"The *root* owner of the token is an externally owned account (EOA). If the given token is child of another  NFT, this will return an EOA address. Otherwise, if the token is owned by an EOA, this EOA wil be returned.\",\"params\":{\"tokenId\":\"ID of the token for which the *root* owner has been retrieved\"},\"returns\":{\"_0\":\"The *root* owner of the token\"}},\"pendingChildOf(uint256,uint256)\":{\"details\":\"Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]\",\"params\":{\"index\":\"Index of the child token in the parent token's pending child tokens array\",\"parentId\":\"ID of the parent token for which the pending child token is being retrieved\"},\"returns\":{\"_0\":\"A Child struct containting data about the specified child\"}},\"pendingChildrenOf(uint256)\":{\"details\":\"Returns array of pending Child structs existing for given parent.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]\",\"params\":{\"parentId\":\"ID of the parent token for which to retrieve the pending child tokens\"},\"returns\":{\"_0\":\"An array of Child structs containing the parent token's pending child tokens\"}},\"rejectAllAssets(uint256,uint256)\":{\"details\":\"Effecitvely deletes the pending array.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.Emits a {AssetRejected} event with assetId = 0.\",\"params\":{\"maxRejections\":\"Maximum number of expected assets to reject, used to prevent from rejecting assets which  arrive just before this operation.\",\"tokenId\":\"ID of the token of which to clear the pending array.\"}},\"rejectAllChildren(uint256,uint256)\":{\"details\":\"Removes the children from the pending array mapping.This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the  rootOwner of the previous parent.Requirements: Requirements: - `parentId` must exist\",\"params\":{\"maxRejections\":\"Maximum number of expected children to reject, used to prevent from rejecting children which  arrive just before this operation.\",\"parentId\":\"ID of the parent token for which to reject all of the pending tokens.\"}},\"rejectAsset(uint256,uint256,uint64)\":{\"details\":\"Removes the asset from the token's pending asset array.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - `index` must be in range of the length of the pending asset array.Emits a {AssetRejected} event.\",\"params\":{\"assetId\":\"ID of the asset that is being rejected\",\"index\":\"Index of the asset in the pending array to be rejected\",\"tokenId\":\"ID of the token that the asset is being rejected from\"}},\"renounceOwnership()\":{\"details\":\"Can only be called by the current owner.Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is  only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"salePrice\":\"Price of the token sale\",\"tokenId\":\"ID of the token for which the royalty info is being retrieved\"},\"returns\":{\"receiver\":\"The beneficiary receiving royalties of the sale\",\"royaltyAmount\":\"The value of the royalties recieved by the `receiver` from the sale\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.\",\"params\":{\"from\":\"Address to transfer the tokens from\",\"to\":\"Address to transfer the tokens to\",\"tokenId\":\"ID of the token to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.\",\"params\":{\"data\":\"Additional data without a specified format to be sent along with the token transaction\",\"from\":\"Address to transfer the tokens from\",\"to\":\"Address to transfer the tokens to\",\"tokenId\":\"ID of the token to transfer\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.Requirements: - The `operator` cannot be the caller.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)\",\"operator\":\"Address of the operator being managed\"}},\"setApprovalForAllForAssets(address,bool)\":{\"details\":\"Operators can call {acceptAsset}, {rejectAsset}, {rejectAllAssets} or {setPriority} for any token  owned by the caller.Requirements:  - The `operator` cannot be the caller.Emits an {ApprovalForAllForAssets} event.\",\"params\":{\"approved\":\"The boolean value indicating whether the operator role is being granted (`true`) or revoked  (`false`)\",\"operator\":\"Address of the account to which the operator role is granted or revoked from\"}},\"setPriority(uint256,uint64[])\":{\"details\":\"The priority array is a non-sequential list of `uint64`s, where the lowest value is considered highest  priority.Value `0` of a priority is a special case equivalent to unitialized.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - The length of `priorities` must be equal the length of the active assets array.Emits a {AssetPrioritySet} event.\",\"params\":{\"priorities\":\"An array of priority values\",\"tokenId\":\"ID of the token to set the priorities for\"}},\"setValidParentForEquippableGroup(uint64,address,uint64)\":{\"params\":{\"equippableGroupId\":\"ID of the equippable group\",\"parentAddress\":\"Address of the parent into which the equippable group can be equipped into\",\"partId\":\"ID of the `Slot` that the items belonging to the equippable group can be equipped into\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"returns\":{\"_0\":\"Symbol of the collection\"}},\"totalAssets()\":{\"returns\":{\"_0\":\"The total number of assets\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The number of tokens in a collection\"}},\"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)\":{\"details\":\"When transferring a child token, the owner of the token is set to `to`, or is not updated in the event of  `to` being the `0x0` address.\",\"params\":{\"childAddress\":\"Address of the child token's collection smart contract.\",\"childId\":\"ID of the child token in its own collection smart contract.\",\"childIndex\":\"Index of a token we are transferring, in the array it belongs to (can be either active array or  pending array)\",\"data\":\"Additional data with no specified format, sent in call to `_to`\",\"destinationId\":\"ID of the token to receive this child token (MUST be 0 if the destination is not a token)\",\"isPending\":\"A boolean value indicating whether the child token being transferred is in the pending array of  the parent token (`true`) or in the active array (`false`)\",\"to\":\"Address to which to transfer the token to\",\"tokenId\":\"ID of the parent token from which the child token is being transferred\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.Emits a {Transfer} event.\",\"params\":{\"from\":\"Address from which to transfer the token from\",\"to\":\"Address to which to transfer the token to\",\"tokenId\":\"ID of the token to transfer\"}},\"transferOwnership(address)\":{\"details\":\"Can only be called by the current owner.\",\"params\":{\"newOwner\":\"Address of the new owner's account\"}},\"unequip(uint256,uint64,uint64)\":{\"details\":\"This can only be called by the owner of the token or by an account that has been granted permission to  manage the given token by the current owner.\",\"params\":{\"assetId\":\"ID of the parent's asset that contains the `Slot` into which the child is equipped\",\"slotPartId\":\"ID of the `Slot` from which to unequip the child\",\"tokenId\":\"ID of the parent from which the child is being unequipped\"}},\"updateRoyaltyRecipient(address)\":{\"details\":\"Custom access control has to be implemented to ensure that only the intended actors can update the  beneficiary.\",\"params\":{\"newRoyaltyRecipient\":\"Address of the new recipient of royalties\"}}},\"title\":\"RMRKAbstractEquippable\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721AddressZeroIsNotaValidOwner()\":[{\"notice\":\"Attempting to grant the token to 0x0 address\"}],\"ERC721ApprovalToCurrentOwner()\":[{\"notice\":\"Attempting to grant approval to the current owner of the token\"}],\"ERC721ApproveCallerIsNotOwnerNorApprovedForAll()\":[{\"notice\":\"Attempting to grant approval when not being owner or approved for all should not be permitted\"}],\"ERC721ApproveToCaller()\":[{\"notice\":\"Attempting to grant approval to self\"}],\"ERC721InvalidTokenId()\":[{\"notice\":\"Attempting to use an invalid token ID\"}],\"ERC721NotApprovedOrOwner()\":[{\"notice\":\"Attempting to manage a token without being its owner or approved by the owner\"}],\"ERC721TransferFromIncorrectOwner()\":[{\"notice\":\"Attempting to transfer the token from an address that is not the owner\"}],\"ERC721TransferToNonReceiverImplementer()\":[{\"notice\":\"Attempting to safe transfer to an address that is unable to receive the token\"}],\"ERC721TransferToTheZeroAddress()\":[{\"notice\":\"Attempting to transfer the token to a 0x0 address\"}],\"RMRKApprovalForAssetsToCurrentOwner()\":[{\"notice\":\"Attempting to grant approval of assets to their current owner\"}],\"RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll()\":[{\"notice\":\"Attempting to grant approval of assets without being the caller or approved for all\"}],\"RMRKAssetAlreadyExists()\":[{\"notice\":\"Attempting to add an asset using an ID that has already been used\"}],\"RMRKBadPriorityListLength()\":[{\"notice\":\"Attempting to set the priorities with an array of length that doesn't match the length of active assets array\"}],\"RMRKCatalogRequiredForParts()\":[{\"notice\":\"Attempting to add an asset entry with `Part`s, without setting the `Catalog` address\"}],\"RMRKChildAlreadyExists()\":[{\"notice\":\"Attempting to accept a child that has already been accepted\"}],\"RMRKChildIndexOutOfRange()\":[{\"notice\":\"Attempting to interact with a child, using index that is higher than the number of children\"}],\"RMRKEquippableEquipNotAllowedByCatalog()\":[{\"notice\":\"Attempting to equip a `Part` with a child not approved by the Catalog\"}],\"RMRKIdZeroForbidden()\":[{\"notice\":\"Attempting to use ID 0, which is not supported\"}],\"RMRKIndexOutOfRange()\":[{\"notice\":\"Attempting to interact with an asset, using index greater than number of assets\"}],\"RMRKIsNotContract()\":[{\"notice\":\"Attempting to interact with an end-user account when the contract account is expected\"}],\"RMRKMaxPendingAssetsReached()\":[{\"notice\":\"Attempting to add a pending asset after the number of pending assets has reached the limit (default limit is  128)\"}],\"RMRKMaxPendingChildrenReached()\":[{\"notice\":\"Attempting to add a pending child after the number of pending children has reached the limit (default limit is 128)\"}],\"RMRKMaxRecursiveBurnsReached(address,uint256)\":[{\"notice\":\"Attempting to burn a total number of recursive children higher than maximum set\"}],\"RMRKMustUnequipFirst()\":[{\"notice\":\"Attempting to transfer a child before it is unequipped\"}],\"RMRKNestableTooDeep()\":[{\"notice\":\"Attempting to nest a child over the nestable limit (current limit is 100 levels of nesting)\"}],\"RMRKNestableTransferToDescendant()\":[{\"notice\":\"Attempting to nest the token to own descendant, which would create a loop and leave the looped tokens in limbo\"}],\"RMRKNestableTransferToNonRMRKNestableImplementer()\":[{\"notice\":\"Attempting to nest the token to a smart contract that doesn't support nesting\"}],\"RMRKNestableTransferToSelf()\":[{\"notice\":\"Attempting to nest the token into itself\"}],\"RMRKNewContributorIsZeroAddress()\":[{\"notice\":\"Attempting to assign a 0x0 address as a contributor\"}],\"RMRKNewOwnerIsZeroAddress()\":[{\"notice\":\"Attempting to transfer the ownership to the 0x0 address\"}],\"RMRKNoAssetMatchingId()\":[{\"notice\":\"Attempting to interact with an asset that can not be found\"}],\"RMRKNotApprovedForAssetsOrOwner()\":[{\"notice\":\"Attempting to manage an asset without owning it or having been granted permission by the owner to do so\"}],\"RMRKNotApprovedOrDirectOwner()\":[{\"notice\":\"Attempting to interact with a token without being its owner or having been granted permission by the  owner to do so\"}],\"RMRKNotEquipped()\":[{\"notice\":\"Attempting to unequip an item that isn't equipped\"}],\"RMRKNotOwner()\":[{\"notice\":\"Attempting to interact with a management function without being the smart contract's owner\"}],\"RMRKNotOwnerOrContributor()\":[{\"notice\":\"Attempting to interact with a function without being the owner or contributor of the collection\"}],\"RMRKPendingChildIndexOutOfRange()\":[{\"notice\":\"Attempting to interact with a pending child using an index greater than the size of pending array\"}],\"RMRKRoyaltiesTooHigh()\":[{\"notice\":\"Attempting to set the royalties to a value higher than 100% (10000 in basis points)\"}],\"RMRKSlotAlreadyUsed()\":[{\"notice\":\"Attempting to equip an item into a slot that already has an item equipped\"}],\"RMRKTargetAssetCannotReceiveSlot()\":[{\"notice\":\"Attempting to equip an item into a `Slot` that the target asset does not implement\"}],\"RMRKTokenCannotBeEquippedWithAssetIntoSlot()\":[{\"notice\":\"Attempting to equip a child into a `Slot` and parent that the child's collection doesn't support\"}],\"RMRKTokenDoesNotHaveAsset()\":[{\"notice\":\"Attempting to compose a NFT of a token without active assets\"}],\"RMRKUnexpectedAssetId()\":[{\"notice\":\"Attempting to accept or reject an asset which does not match the one at the specified index\"}],\"RMRKUnexpectedChildId()\":[{\"notice\":\"Attempting to accept or transfer a child which does not match the one at the specified index\"}],\"RMRKUnexpectedNumberOfAssets()\":[{\"notice\":\"Attempting to reject all pending assets but more assets than expected are pending\"}],\"RMRKUnexpectedNumberOfChildren()\":[{\"notice\":\"Attempting to reject all pending children but children assets than expected are pending\"}]},\"events\":{\"AllChildrenRejected(uint256)\":{\"notice\":\"Used to notify listeners that all pending child tokens of a given token have been rejected.\"},\"ApprovalForAllForAssets(address,address,bool)\":{\"notice\":\"Used to notify listeners that owner has granted approval to the user to manage assets of all of their  tokens.\"},\"ApprovalForAssets(address,address,uint256)\":{\"notice\":\"Used to notify listeners that owner has granted an approval to the user to manage the assets of a  given token.\"},\"AssetAccepted(uint256,uint64,uint64)\":{\"notice\":\"Used to notify listeners that an asset object at `assetId` is accepted by the token and migrated  from token's pending assets array to active assets array of the token.\"},\"AssetAddedToTokens(uint256[],uint64,uint64)\":{\"notice\":\"Used to notify listeners that an asset object at `assetId` is added to token's pending asset  array.\"},\"AssetPrioritySet(uint256)\":{\"notice\":\"Used to notify listeners that token's prioritiy array is reordered.\"},\"AssetRejected(uint256,uint64)\":{\"notice\":\"Used to notify listeners that an asset object at `assetId` is rejected from token and is dropped  from the pending assets array of the token.\"},\"AssetSet(uint64)\":{\"notice\":\"Used to notify listeners that an asset object is initialized at `assetId`.\"},\"ChildAccepted(uint256,uint256,address,uint256)\":{\"notice\":\"Used to notify listeners that a new child token was accepted by the parent token.\"},\"ChildAssetEquipped(uint256,uint64,uint64,uint256,address,uint64)\":{\"notice\":\"Used to notify listeners that a child's asset has been equipped into one of its parent assets.\"},\"ChildAssetUnequipped(uint256,uint64,uint64,uint256,address,uint64)\":{\"notice\":\"Used to notify listeners that a child's asset has been unequipped from one of its parent assets.\"},\"ChildProposed(uint256,uint256,address,uint256)\":{\"notice\":\"Used to notify listeners that a new token has been added to a given token's pending children array.\"},\"ChildTransferred(uint256,uint256,address,uint256,bool,bool)\":{\"notice\":\"Used to notify listeners a child token has been transferred from parent token.\"},\"ContributorUpdate(address,bool)\":{\"notice\":\"Event that signifies that an address was granted contributor role or that the permission has been  revoked.\"},\"NestTransfer(address,address,uint256,uint256,uint256)\":{\"notice\":\"Used to notify listeners that the token is being transferred.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Used to anounce the transfer of ownership.\"},\"ValidParentEquippableGroupIdSet(uint64,uint64,address)\":{\"notice\":\"Used to notify listeners that the assets belonging to a `equippableGroupId` have been marked as  equippable into a given slot and parent\"}},\"kind\":\"user\",\"methods\":{\"VERSION()\":{\"notice\":\"Version of the @rmrk-team/evm-contracts package\"},\"acceptAsset(uint256,uint256,uint64)\":{\"notice\":\"Accepts a asset at from the pending array of given token.\"},\"acceptChild(uint256,uint256,address,uint256)\":{\"notice\":\"Used to accept a pending child token for a given parent token.\"},\"addAssetEntry(string)\":{\"notice\":\"Used to add a asset entry.\"},\"addAssetToToken(uint256,uint64,uint64)\":{\"notice\":\"Used to add an asset to a token.\"},\"addChild(uint256,uint256,bytes)\":{\"notice\":\"Used to add a child token to a given parent token.\"},\"addEquippableAssetEntry(uint64,address,string,uint64[])\":{\"notice\":\"Used to add an equippable asset entry.\"},\"approve(address,uint256)\":{\"notice\":\"Used to grant a one-time approval to manage one's token.\"},\"approveForAssets(address,uint256)\":{\"notice\":\"Used to grant approvals for specific tokens to a specified address.\"},\"balanceOf(address)\":{\"notice\":\"Used to retrieve the number of tokens in `owner`'s account.\"},\"burn(uint256)\":{\"notice\":\"Used to burn a given token.\"},\"burn(uint256,uint256)\":{\"notice\":\"Used to burn a given token.\"},\"canTokenBeEquippedWithAssetIntoSlot(address,uint256,uint64,uint64)\":{\"notice\":\"Used to verify whether a token can be equipped into a given parent's slot.\"},\"childOf(uint256,uint256)\":{\"notice\":\"Used to retrieve a specific active child token for a given parent token.\"},\"childrenOf(uint256)\":{\"notice\":\"Used to retrieve the active child tokens of a given parent token.\"},\"collectionMetadata()\":{\"notice\":\"Used to retrieve the metadata of the collection.\"},\"directOwnerOf(uint256)\":{\"notice\":\"Used to retrieve the immediate owner of the given token.\"},\"equip((uint256,uint256,uint64,uint64,uint64))\":{\"notice\":\"Used to equip a child into a token.\"},\"getActiveAssetPriorities(uint256)\":{\"notice\":\"Used to retrieve the priorities of the active resoources of a given token.\"},\"getActiveAssets(uint256)\":{\"notice\":\"Used to retrieve IDs of the active assets of given token.\"},\"getApproved(uint256)\":{\"notice\":\"Used to retrieve the account approved to manage given token.\"},\"getApprovedForAssets(uint256)\":{\"notice\":\"Used to get the address of the user that is approved to manage the specified token from the current  owner.\"},\"getAssetAndEquippableData(uint256,uint64)\":{\"notice\":\"Used to get the asset and equippable data associated with given `assetId`.\"},\"getAssetMetadata(uint256,uint64)\":{\"notice\":\"Used to fetch the asset metadata of the specified token's active asset with the given index.\"},\"getAssetReplacements(uint256,uint64)\":{\"notice\":\"Used to retrieve the asset that will be replaced if a given asset from the token's pending array  is accepted.\"},\"getEquipment(uint256,address,uint64)\":{\"notice\":\"Used to get the Equipment object equipped into the specified slot of the desired token.\"},\"getPendingAssets(uint256)\":{\"notice\":\"Used to retrieve IDs of the pending assets of given token.\"},\"getRoyaltyPercentage()\":{\"notice\":\"Used to retrieve the specified royalty percentage.\"},\"getRoyaltyRecipient()\":{\"notice\":\"Used to retrieve the recipient of royalties.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Used to check if the given address is allowed to manage the tokens of the specified address.\"},\"isApprovedForAllForAssets(address,address)\":{\"notice\":\"Used to check whether the address has been granted the operator role by a given address or not.\"},\"isChildEquipped(uint256,address,uint256)\":{\"notice\":\"Used to check whether the token has a given child equipped.\"},\"isContributor(address)\":{\"notice\":\"Used to check if the address is one of the contributors.\"},\"manageContributor(address,bool)\":{\"notice\":\"Adds or removes a contributor to the smart contract.\"},\"maxSupply()\":{\"notice\":\"Used to retrieve the maximum supply of the collection.\"},\"name()\":{\"notice\":\"Used to retrieve the collection name.\"},\"nestTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Used to transfer the token into another token.\"},\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Used to retrieve the *root* owner of a given token.\"},\"pendingChildOf(uint256,uint256)\":{\"notice\":\"Used to retrieve a specific pending child token from a given parent token.\"},\"pendingChildrenOf(uint256)\":{\"notice\":\"Used to retrieve the pending child tokens of a given parent token.\"},\"rejectAllAssets(uint256,uint256)\":{\"notice\":\"Rejects all assets from the pending array of a given token.\"},\"rejectAllChildren(uint256,uint256)\":{\"notice\":\"Used to reject all pending children of a given parent token.\"},\"rejectAsset(uint256,uint256,uint64)\":{\"notice\":\"Rejects a asset from the pending array of given token.\"},\"renounceOwnership()\":{\"notice\":\"Leaves the contract without owner. Functions using the `onlyOwner` modifier will be disabled.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Used to retrieve the information about who shall receive royalties of a sale of the specified token and  how much they will be.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Used to safely transfer a given token token from `from` to `to`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Used to safely transfer a given token token from `from` to `to`.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Used to approve or remove `operator` as an operator for the caller.\"},\"setApprovalForAllForAssets(address,bool)\":{\"notice\":\"Used to add or remove an operator of assets for the caller.\"},\"setPriority(uint256,uint64[])\":{\"notice\":\"Sets a new priority array for a given token.\"},\"setValidParentForEquippableGroup(uint64,address,uint64)\":{\"notice\":\"Used to declare that the assets belonging to a given `equippableGroupId` are equippable into the `Slot`  associated with the `partId` of the collection at the specified `parentAddress`\"},\"symbol()\":{\"notice\":\"Used to retrieve the collection symbol.\"},\"totalAssets()\":{\"notice\":\"Used to retrieve the total number of assets.\"},\"totalSupply()\":{\"notice\":\"Used to retrieve the total supply of the tokens in a collection.\"},\"transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)\":{\"notice\":\"Used to transfer a child token from a given parent token.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers a given token from `from` to `to`.\"},\"transferOwnership(address)\":{\"notice\":\"Transfers ownership of the contract to a new owner.\"},\"unequip(uint256,uint64,uint64)\":{\"notice\":\"Used to unequip child from parent token.\"},\"updateRoyaltyRecipient(address)\":{\"notice\":\"Used to update recipient of royalties.\"}},\"notice\":\"Abstract implementation of RMRK equipable module.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@rmrk-team/evm-contracts/contracts/implementations/abstract/RMRKAbstractEquippable.sol\":\"RMRKAbstractEquippable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@latticexyz/=node_modules/@latticexyz/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@rmrk-team/=node_modules/@rmrk-team/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"keccak256\":\"0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f3fe369b6d0e101844b425f1d08e35bf512962d0590b1f80decb8130c9a6890\",\"dweb:/ipfs/QmXCan6wX4qwJkdR1VvsYLeq8JTB2YxRHLucpuXpsKAvzQ\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4\",\"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/access/Ownable.sol\":{\"keccak256\":\"0x7c46c3ab469e5f6b95fc1126946b03708bb9d0943da3a4f97bf4d94309cc5c67\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://d91938cd5c1fb62551e40cb27c2dbc54ba28e4d844fc1f66e10aab9d96b1f308\",\"dweb:/ipfs/QmevebZjAcMqW4URCczoW9QxTo8x8zCwfVemuRLow3a4Uq\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/catalog/IRMRKCatalog.sol\":{\"keccak256\":\"0xf14074edcd3bcef665f17659d206465bd9ea5cd7999acf28065e623f88f04a86\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://c967f0cc9fbf3dd16f8759d051220e750b8fca69ec503f33bf25c95ef5486403\",\"dweb:/ipfs/QmecpKwQKAPrd85Pi2jKTWfEjFrg2ZudjmMNEFhtxRbrat\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/core/RMRKCore.sol\":{\"keccak256\":\"0x2aed82db53e50724cefa3ee8ca62e7b9e4fb170a2b324cd5f518914480ba9b5b\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://962a4c262e1710c8b0f3bb94f77513ee3aa1e561c85d9acb06960f36ede3bba7\",\"dweb:/ipfs/QmTQKxurANXy8HCtdLLcaxfwCPMoVJPKpYxtsj9CwiYQaZ\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/equippable/IERC6220.sol\":{\"keccak256\":\"0x4fcd6ea56d18b4daee46873794c002ad78160ba4a07d4f49362313c38ec0e28a\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bbc28006dd8439bc0e1f332679d36a4c8b8a46ae2e4f37a5e4c0bdaaab85655e\",\"dweb:/ipfs/QmU1eN6R97EhpUUsQWD4qoz3KCsyMHZ8GvihVPnAoEk5dU\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/equippable/RMRKMinifiedEquippable.sol\":{\"keccak256\":\"0x7c2d756ea5956cd7c479c611d04082ef4267b8e65e99b884b84e08d7fb685c2c\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://11645970f49c04f04b316c312b597138d9277cb0d7bfce4a21a06c34d8be0f68\",\"dweb:/ipfs/QmYAUiH4fpYPWwiuLHTMpDXEtp7Vbieoo3XaAee4BUBG8c\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/extension/RMRKRoyalties.sol\":{\"keccak256\":\"0xf744b49d208b4d1e6c00ceb4650cb2c9e6b1ef547d4aaf80045f398b1154a4a6\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://896b29ade2d173ed093d94bc3d2880b748c37bf050dfac6bf1db42e035258203\",\"dweb:/ipfs/QmXbK7E3LTKxGquetSn5tWFpiFDDjFBWW4Lw7KwgT1x4T4\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/library/RMRKErrors.sol\":{\"keccak256\":\"0x7d6a3648047dca37d1e21550c723d960e4c9d3783e3d0efb84602266cce45b35\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://170064f8e2d6211e251a7610236beada23c8c598987cb3dbd62826007a4ca553\",\"dweb:/ipfs/QmSgM9T5Q2azFicGQsiXPG8YZSiDEGgRYeHBUe2iAcP3gN\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/library/RMRKLib.sol\":{\"keccak256\":\"0x953bb028766f17fdafddd5a49b47d76058c4a8e18dee358a51ebe6a2927033db\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://40bb3aec2b5942591536a3d4428cb08154f7ab80d3b94c3e4ccf85ca053606d8\",\"dweb:/ipfs/QmdyYsoYthTGFjcEQ35Ra57qmywiXh6UxDCyvAJZGKsUJH\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/multiasset/IERC5773.sol\":{\"keccak256\":\"0x4e5b78824f54620c5b610a5e2c944cd159b8b054065fabf3af2aaea2f3360d89\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://713b179262117f3ff772aed51aa26e48bf7e3ff5c7ec6588060a887e634fe0f1\",\"dweb:/ipfs/Qme2B9DrgB93HPQy96Pia23jzrkdmUrVQPHdAqCxA8dzYY\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/nestable/IERC7401.sol\":{\"keccak256\":\"0x5feb73f09676b2961b45e5f165d95ff8197609e01e115590a627a47940690fb3\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://93ea41ba10af02b385dbbe036e85f286f6f923e8adea11eb28ed21890a1fe953\",\"dweb:/ipfs/QmRgJKeYyh8VNNtdKF5Pcyei1qKDKNE5zmvXRt3Txoapfo\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/RMRK/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x14a91bf4e2ca7a5423b903c551aedb08c98f9d089e429998f9711286c0c17882\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4e07319bbc8447047f9fa596d1af95ab5d235661b5f48159eaee6144d45261f0\",\"dweb:/ipfs/QmdAvUL5jmAx9ExoyR6199KUmkXfd8q4SfBuvJXygKHNbx\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/implementations/abstract/RMRKAbstractEquippable.sol\":{\"keccak256\":\"0x0d61ad2493dd5b867d94a0a0413b280952ea588b42e2184ca6e7c1ab6de086bd\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://00eb350ef9e89c56cc5b869fffc7594039a1d889cf84d41587f3c581e6684cc7\",\"dweb:/ipfs/QmcZmdeghW4NBck12J1e5Sq1zUk8Wz1AvsZ2JyAEVUvpZU\"]},\"node_modules/@rmrk-team/evm-contracts/contracts/implementations/utils/RMRKImplementationBase.sol\":{\"keccak256\":\"0x56657e977934e300a17ad4db49f01730abcefed4f6eba3549b951e14dda18d5e\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://585ccce5f8bab950cafad9f5d003443bddd2053357aa4a1f9bd73fbf3f421a77\",\"dweb:/ipfs/QmZocW2chh1gfFQyHpFKWpYJK2vapqtC2yVcq13XFDYNFG\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721AddressZeroIsNotaValidOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721ApprovalToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721ApproveCallerIsNotOwnerNorApprovedForAll"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721ApproveToCaller"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721InvalidTokenId"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721NotApprovedOrOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721TransferFromIncorrectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721TransferToNonReceiverImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ERC721TransferToTheZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKApprovalForAssetsToCurrentOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKAssetAlreadyExists"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKBadPriorityListLength"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKCatalogRequiredForParts"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKChildAlreadyExists"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKChildIndexOutOfRange"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKEquippableEquipNotAllowedByCatalog"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKIdZeroForbidden"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKIndexOutOfRange"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKIsNotContract"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKMaxPendingAssetsReached"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKMaxPendingChildrenReached"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "childContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256"
            }
          ],
          "type": "error",
          "name": "RMRKMaxRecursiveBurnsReached"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKMustUnequipFirst"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNestableTooDeep"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNestableTransferToDescendant"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNestableTransferToNonRMRKNestableImplementer"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNestableTransferToSelf"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNewContributorIsZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNewOwnerIsZeroAddress"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNoAssetMatchingId"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNotApprovedForAssetsOrOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNotApprovedOrDirectOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNotEquipped"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNotOwner"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKNotOwnerOrContributor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKPendingChildIndexOutOfRange"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKRoyaltiesTooHigh"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKSlotAlreadyUsed"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKTargetAssetCannotReceiveSlot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKTokenCannotBeEquippedWithAssetIntoSlot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKTokenDoesNotHaveAsset"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKUnexpectedAssetId"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKUnexpectedChildId"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKUnexpectedNumberOfAssets"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RMRKUnexpectedNumberOfChildren"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "RentrantCall"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AllChildrenRejected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAll",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ApprovalForAllForAssets",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "approved",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ApprovalForAssets",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "replacesId",
              "type": "uint64",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AssetAccepted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]",
              "indexed": false
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "replacesId",
              "type": "uint64",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AssetAddedToTokens",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AssetPrioritySet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AssetRejected",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "AssetSet",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "childIndex",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ChildAccepted",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "slotPartId",
              "type": "uint64",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint64",
              "name": "childAssetId",
              "type": "uint64",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ChildAssetEquipped",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "slotPartId",
              "type": "uint64",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint64",
              "name": "childAssetId",
              "type": "uint64",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ChildAssetUnequipped",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "childIndex",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ChildProposed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "childIndex",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "fromPending",
              "type": "bool",
              "indexed": false
            },
            {
              "internalType": "bool",
              "name": "toZero",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ChildTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "contributor",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "bool",
              "name": "isContributor",
              "type": "bool",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ContributorUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "fromTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "toTokenId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "NestTransfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "equippableGroupId",
              "type": "uint64",
              "indexed": true
            },
            {
              "internalType": "uint64",
              "name": "slotPartId",
              "type": "uint64",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "parentAddress",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "ValidParentEquippableGroupIdSet",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "RMRK_INTERFACE",
          "outputs": [
            {
              "internalType": "bytes4",
              "name": "",
              "type": "bytes4"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "VERSION",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "acceptAsset"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "parentId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "childIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "acceptChild"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addAssetEntry",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "replacesAssetWithId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addAssetToToken"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "parentId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addChild"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "equippableGroupId",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "catalogAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "uint64[]",
              "name": "partIds",
              "type": "uint64[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addEquippableAssetEntry",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approveForAssets"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxChildrenBurns",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "burn",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "parent",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotId",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "canTokenBeEquippedWithAssetIntoSlot",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "parentId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "childOf",
          "outputs": [
            {
              "internalType": "struct IERC7401.Child",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "parentId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "childrenOf",
          "outputs": [
            {
              "internalType": "struct IERC7401.Child[]",
              "name": "",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "collectionMetadata",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "directOwnerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct IERC6220.IntakeEquip",
              "name": "data",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "childIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "assetId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "slotPartId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "childAssetId",
                  "type": "uint64"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "equip"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getActiveAssetPriorities",
          "outputs": [
            {
              "internalType": "uint64[]",
              "name": "",
              "type": "uint64[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getActiveAssets",
          "outputs": [
            {
              "internalType": "uint64[]",
              "name": "",
              "type": "uint64[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getApprovedForAssets",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAssetAndEquippableData",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            },
            {
              "internalType": "uint64[]",
              "name": "",
              "type": "uint64[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAssetMetadata",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "newAssetId",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getAssetReplacements",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "targetCatalogAddress",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "slotPartId",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getEquipment",
          "outputs": [
            {
              "internalType": "struct IERC6220.Equipment",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "assetId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "childAssetId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint256",
                  "name": "childId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "childEquippableAddress",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPendingAssets",
          "outputs": [
            {
              "internalType": "uint64[]",
              "name": "",
              "type": "uint64[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyPercentage",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRoyaltyRecipient",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isApprovedForAllForAssets",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isChildEquipped",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "contributor",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "isContributor",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "contributor",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "grantRole",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "manageContributor"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "maxSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "nestTransferFrom"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "parentId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "pendingChildOf",
          "outputs": [
            {
              "internalType": "struct IERC7401.Child",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "parentId",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "pendingChildrenOf",
          "outputs": [
            {
              "internalType": "struct IERC7401.Child[]",
              "name": "",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "tokenId",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "contractAddress",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRejections",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rejectAllAssets"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxRejections",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rejectAllChildren"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rejectAsset"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "royaltyInfo",
          "outputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "royaltyAmount",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "safeTransferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAll"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAllForAssets"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64[]",
              "name": "priorities",
              "type": "uint64[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setPriority"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "equippableGroupId",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "parentAddress",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "partId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setValidParentForEquippableGroup"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalAssets",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "destinationId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "childIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "childId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPending",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferChild"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint64",
              "name": "assetId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "slotPartId",
              "type": "uint64"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "unequip"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newRoyaltyRecipient",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateRoyaltyRecipient"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "acceptAsset(uint256,uint256,uint64)": {
            "details": "Migrates the asset from the token's pending asset array to the token's active asset array.Active assets cannot be removed by anyone, but can be replaced by a new asset.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - `index` must be in range of the length of the pending asset array.Emits an {AssetAccepted} event.",
            "params": {
              "assetId": "ID of the asset that is being accepted",
              "index": "Index of the asset in the pending array to accept",
              "tokenId": "ID of the token for which to accept the pending asset"
            }
          },
          "acceptChild(uint256,uint256,address,uint256)": {
            "details": "This moves the child token from parent token's pending child tokens array into the active child tokens  array.",
            "params": {
              "childAddress": "Address of the collection smart contract of the child token expected to be located at the  specified index of the given parent token's pending children array",
              "childId": "ID of the child token expected to be located at the specified index of the given parent token's  pending children array",
              "childIndex": "Index of a child tokem in the given parent's pending children array",
              "parentId": "ID of the parent token for which the child token is being accepted"
            }
          },
          "addAssetEntry(string)": {
            "details": "The ID of the asset is automatically assigned to be the next available asset ID.",
            "params": {
              "metadataURI": "Metadata URI of the asset"
            },
            "returns": {
              "_0": "ID of the newly added asset"
            }
          },
          "addAssetToToken(uint256,uint64,uint64)": {
            "details": "If the given asset is already added to the token, the execution will be reverted.If the asset ID is invalid, the execution will be reverted.If the token already has the maximum amount of pending assets (128), the execution will be  reverted.",
            "params": {
              "assetId": "ID of the asset to add to the token",
              "replacesAssetWithId": "ID of the asset to replace from the token's list of active assets",
              "tokenId": "ID of the token to add the asset to"
            }
          },
          "addChild(uint256,uint256,bytes)": {
            "details": "This adds the child token into the given parent token's pending child tokens array.Requirements:  - `directOwnerOf` on the child contract must resolve to the called contract.  - the pending array of the parent contract must not be full.",
            "params": {
              "childId": "ID of the new proposed child token",
              "data": "Additional data with no specified format",
              "parentId": "ID of the parent token to receive the new child token"
            }
          },
          "addEquippableAssetEntry(uint64,address,string,uint64[])": {
            "details": "The ID of the asset is automatically assigned to be the next available asset ID.",
            "params": {
              "catalogAddress": "Address of the `Catalog` smart contract this asset belongs to",
              "equippableGroupId": "ID of the equippable group",
              "metadataURI": "Metadata URI of the asset",
              "partIds": "An array of IDs of fixed and slot parts to be included in the asset"
            },
            "returns": {
              "_0": "The total number of assets after this asset has been added"
            }
          },
          "approve(address,uint256)": {
            "details": "Gives permission to `to` to transfer `tokenId` token to another account.The approval is cleared when the token is transferred.Only a single account can be approved at a time, so approving the zero address clears previous approvals.Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist.Emits an {Approval} event.",
            "params": {
              "to": "Address receiving the approval",
              "tokenId": "ID of the token for which the approval is being granted"
            }
          },
          "approveForAssets(address,uint256)": {
            "details": "This can only be called by the owner of the token or by an account that has been granted permission to  manage all of the owner's assets.",
            "params": {
              "to": "Address of the account to receive the approval to the specified token",
              "tokenId": "ID of the token for which we are granting the permission"
            }
          },
          "balanceOf(address)": {
            "params": {
              "owner": "Address of the account being checked"
            },
            "returns": {
              "_0": "The balance of the given account"
            }
          },
          "burn(uint256)": {
            "details": "In case the token has any child tokens, the execution will be reverted.",
            "params": {
              "tokenId": "ID of the token to burn"
            }
          },
          "burn(uint256,uint256)": {
            "details": "When a token is burned, all of its child tokens are recursively burned as well.When specifying the maximum recursive burns, the execution will be reverted if there are more children to be  burned.Setting the `maxRecursiveBurn` value to 0 will only attempt to burn the specified token and revert if there  are any child tokens present.The approvals are cleared when the token is burned.Requirements:  - `tokenId` must exist.Emits a {Transfer} event.",
            "params": {
              "maxRecursiveBurns": "Maximum number of tokens to recursively burn",
              "tokenId": "ID of the token to burn"
            },
            "returns": {
              "_0": "Number of recursively burned children"
            }
          },
          "canTokenBeEquippedWithAssetIntoSlot(address,uint256,uint64,uint64)": {
            "params": {
              "assetId": "ID of the asset associated with the token we want to equip",
              "parent": "Address of the parent token's smart contract",
              "slotId": "ID of the slot that we want to equip the token into",
              "tokenId": "ID of the token we want to equip"
            },
            "returns": {
              "_0": "A boolean indicating whether the token with the given asset can be equipped into the desired slot"
            }
          },
          "childOf(uint256,uint256)": {
            "details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
            "params": {
              "index": "Index of the child token in the parent token's active child tokens array",
              "parentId": "ID of the parent token for which the child is being retrieved"
            },
            "returns": {
              "_0": "A Child struct containing data about the specified child"
            }
          },
          "childrenOf(uint256)": {
            "details": "Returns array of Child structs existing for parent token.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
            "params": {
              "parentId": "ID of the parent token for which to retrieve the active child tokens"
            },
            "returns": {
              "_0": "An array of Child structs containing the parent token's active child tokens"
            }
          },
          "collectionMetadata()": {
            "returns": {
              "_0": "string The metadata URI of the collection"
            }
          },
          "directOwnerOf(uint256)": {
            "details": "If the immediate owner is another token, the address returned, should be the one of the parent token's  collection smart contract.",
            "params": {
              "tokenId": "ID of the token for which the RMRK owner is being retrieved"
            },
            "returns": {
              "_0": "Address of the given token's owner",
              "_1": "The ID of the parent token. Should be `0` if the owner is an externally owned account",
              "_2": "The boolean value signifying whether the owner is an NFT or not"
            }
          },
          "equip((uint256,uint256,uint64,uint64,uint64))": {
            "details": "The `IntakeEquip` stuct contains the following data:  [      tokenId,      childIndex,      assetId,      slotPartId,      childAssetId  ]",
            "params": {
              "data": "An `IntakeEquip` struct specifying the equip data"
            }
          },
          "getActiveAssetPriorities(uint256)": {
            "details": "Asset priorities are a non-sequential array of uint64 values with an array size equal to active asset  priorites.",
            "params": {
              "tokenId": "ID of the token for which to retrieve the priorities of the active assets"
            },
            "returns": {
              "_0": "An array of priorities of the active assets of the given token"
            }
          },
          "getActiveAssets(uint256)": {
            "details": "Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.You can safely get 10k",
            "params": {
              "tokenId": "ID of the token to retrieve the IDs of the active assets"
            },
            "returns": {
              "_0": "An array of active asset IDs of the given token"
            }
          },
          "getApproved(uint256)": {
            "details": "Requirements:  - `tokenId` must exist.",
            "params": {
              "tokenId": "ID of the token to check for approval"
            },
            "returns": {
              "_0": "Address of the account approved to manage the token"
            }
          },
          "getApprovedForAssets(uint256)": {
            "params": {
              "tokenId": "ID of the token we are checking"
            },
            "returns": {
              "_0": "Address of the account that is approved to manage the token"
            }
          },
          "getAssetAndEquippableData(uint256,uint64)": {
            "params": {
              "assetId": "ID of the asset of which we are retrieving",
              "tokenId": "ID of the token for which to retrieve the asset"
            },
            "returns": {
              "_0": "The metadata URI of the asset",
              "_1": "ID of the equippable group this asset belongs to",
              "_2": "The address of the catalog the part belongs to",
              "_3": "An array of IDs of parts included in the asset"
            }
          },
          "getAssetMetadata(uint256,uint64)": {
            "details": "Assets are stored by reference mapping `_assets[assetId]`.Can be overriden to implement enumerate, fallback or other custom logic.",
            "params": {
              "assetId": "Asset Id, must be in the active assets array",
              "tokenId": "ID of the token from which to retrieve the asset metadata"
            },
            "returns": {
              "_0": "The metadata of the asset belonging to the specified index in the token's active assets  array"
            }
          },
          "getAssetReplacements(uint256,uint64)": {
            "details": "Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.",
            "params": {
              "newAssetId": "ID of the pending asset which will be accepted",
              "tokenId": "ID of the token to check"
            },
            "returns": {
              "_0": "ID of the asset which will be replaced"
            }
          },
          "getEquipment(uint256,address,uint64)": {
            "details": "The `Equipment` struct consists of the following data:  [      assetId,      childAssetId,      childId,      childEquippableAddress  ]",
            "params": {
              "slotPartId": "ID of the `Slot` part that we are checking for equipped objects",
              "targetCatalogAddress": "Address of the `Catalog` associated with the `Slot` part of the token",
              "tokenId": "ID of the token for which we are retrieving the equipped object"
            },
            "returns": {
              "_0": "The `Equipment` struct containing data about the equipped object"
            }
          },
          "getPendingAssets(uint256)": {
            "details": "Asset data is stored by reference, in order to access the data corresponding to the ID, call  `getAssetMetadata(tokenId, assetId)`.",
            "params": {
              "tokenId": "ID of the token to retrieve the IDs of the pending assets"
            },
            "returns": {
              "_0": "An array of pending asset IDs of the given token"
            }
          },
          "getRoyaltyPercentage()": {
            "returns": {
              "_0": "The royalty percentage expressed in the basis points"
            }
          },
          "getRoyaltyRecipient()": {
            "returns": {
              "_0": "Address of the recipient of royalties"
            }
          },
          "isApprovedForAll(address,address)": {
            "params": {
              "operator": "Address being checked for approval",
              "owner": "Address of the owner of the tokens"
            },
            "returns": {
              "_0": "A boolean value signifying whether the *operator* is allowed to manage the tokens of the *owner* (`true`)  or not (`false`)"
            }
          },
          "isApprovedForAllForAssets(address,address)": {
            "details": "See {setApprovalForAllForAssets}.",
            "params": {
              "operator": "Address of the account that we are checking whether it has the operator role or not",
              "owner": "Address of the account that we are checking for whether it has granted the operator role"
            },
            "returns": {
              "_0": "A boolean value indicating wehter the account we are checking has been granted the operator role"
            }
          },
          "isChildEquipped(uint256,address,uint256)": {
            "details": "This is used to prevent from transferring a child that is equipped.",
            "params": {
              "childAddress": "Address of the child token's smart contract",
              "childId": "ID of the child token",
              "tokenId": "ID of the parent token for which we are querying for"
            },
            "returns": {
              "_0": "A boolean value indicating whether the child token is equipped into the given token or not"
            }
          },
          "isContributor(address)": {
            "params": {
              "contributor": "Address of the contributor whose status we are checking"
            },
            "returns": {
              "_0": "Boolean value indicating whether the address is a contributor or not"
            }
          },
          "manageContributor(address,bool)": {
            "details": "Can only be called by the owner.Emits ***ContributorUpdate*** event.",
            "params": {
              "contributor": "Address of the contributor's account",
              "grantRole": "A boolean value signifying whether the contributor role is being granted (`true`) or revoked  (`false`)"
            }
          },
          "maxSupply()": {
            "returns": {
              "_0": "The maximum supply of tokens in the collection"
            }
          },
          "name()": {
            "returns": {
              "_0": "Name of the collection"
            }
          },
          "nestTransferFrom(address,address,uint256,uint256,bytes)": {
            "params": {
              "data": "Additional data with no specified format, sent in the addChild call",
              "destinationId": "ID of the token to receive the token being transferred",
              "from": "Address of the direct owner of the token to be transferred",
              "to": "Address of the receiving token's collection smart contract",
              "tokenId": "ID of the token being transferred"
            }
          },
          "owner()": {
            "returns": {
              "_0": "Address of the current owner"
            }
          },
          "ownerOf(uint256)": {
            "details": "The *root* owner of the token is an externally owned account (EOA). If the given token is child of another  NFT, this will return an EOA address. Otherwise, if the token is owned by an EOA, this EOA wil be returned.",
            "params": {
              "tokenId": "ID of the token for which the *root* owner has been retrieved"
            },
            "returns": {
              "_0": "The *root* owner of the token"
            }
          },
          "pendingChildOf(uint256,uint256)": {
            "details": "Returns a single Child struct locating at `index` of parent token's active child tokens array.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
            "params": {
              "index": "Index of the child token in the parent token's pending child tokens array",
              "parentId": "ID of the parent token for which the pending child token is being retrieved"
            },
            "returns": {
              "_0": "A Child struct containting data about the specified child"
            }
          },
          "pendingChildrenOf(uint256)": {
            "details": "Returns array of pending Child structs existing for given parent.The Child struct consists of the following values:  [      tokenId,      contractAddress  ]",
            "params": {
              "parentId": "ID of the parent token for which to retrieve the pending child tokens"
            },
            "returns": {
              "_0": "An array of Child structs containing the parent token's pending child tokens"
            }
          },
          "rejectAllAssets(uint256,uint256)": {
            "details": "Effecitvely deletes the pending array.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.Emits a {AssetRejected} event with assetId = 0.",
            "params": {
              "maxRejections": "Maximum number of expected assets to reject, used to prevent from rejecting assets which  arrive just before this operation.",
              "tokenId": "ID of the token of which to clear the pending array."
            }
          },
          "rejectAllChildren(uint256,uint256)": {
            "details": "Removes the children from the pending array mapping.This does not update the ownership storage data on children. If necessary, ownership can be reclaimed by the  rootOwner of the previous parent.Requirements: Requirements: - `parentId` must exist",
            "params": {
              "maxRejections": "Maximum number of expected children to reject, used to prevent from rejecting children which  arrive just before this operation.",
              "parentId": "ID of the parent token for which to reject all of the pending tokens."
            }
          },
          "rejectAsset(uint256,uint256,uint64)": {
            "details": "Removes the asset from the token's pending asset array.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - `index` must be in range of the length of the pending asset array.Emits a {AssetRejected} event.",
            "params": {
              "assetId": "ID of the asset that is being rejected",
              "index": "Index of the asset in the pending array to be rejected",
              "tokenId": "ID of the token that the asset is being rejected from"
            }
          },
          "renounceOwnership()": {
            "details": "Can only be called by the current owner.Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is  only available to the owner."
          },
          "royaltyInfo(uint256,uint256)": {
            "params": {
              "salePrice": "Price of the token sale",
              "tokenId": "ID of the token for which the royalty info is being retrieved"
            },
            "returns": {
              "receiver": "The beneficiary receiving royalties of the sale",
              "royaltyAmount": "The value of the royalties recieved by the `receiver` from the sale"
            }
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.",
            "params": {
              "from": "Address to transfer the tokens from",
              "to": "Address to transfer the tokens to",
              "tokenId": "ID of the token to transfer"
            }
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must exist and be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.  - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.Emits a {Transfer} event.",
            "params": {
              "data": "Additional data without a specified format to be sent along with the token transaction",
              "from": "Address to transfer the tokens from",
              "to": "Address to transfer the tokens to",
              "tokenId": "ID of the token to transfer"
            }
          },
          "setApprovalForAll(address,bool)": {
            "details": "Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.Requirements: - The `operator` cannot be the caller.Emits an {ApprovalForAll} event.",
            "params": {
              "approved": "A boolean value signifying whether the approval is being granted (`true`) or (`revoked`)",
              "operator": "Address of the operator being managed"
            }
          },
          "setApprovalForAllForAssets(address,bool)": {
            "details": "Operators can call {acceptAsset}, {rejectAsset}, {rejectAllAssets} or {setPriority} for any token  owned by the caller.Requirements:  - The `operator` cannot be the caller.Emits an {ApprovalForAllForAssets} event.",
            "params": {
              "approved": "The boolean value indicating whether the operator role is being granted (`true`) or revoked  (`false`)",
              "operator": "Address of the account to which the operator role is granted or revoked from"
            }
          },
          "setPriority(uint256,uint64[])": {
            "details": "The priority array is a non-sequential list of `uint64`s, where the lowest value is considered highest  priority.Value `0` of a priority is a special case equivalent to unitialized.Requirements:  - The caller must own the token or be approved to manage the token's assets  - `tokenId` must exist.  - The length of `priorities` must be equal the length of the active assets array.Emits a {AssetPrioritySet} event.",
            "params": {
              "priorities": "An array of priority values",
              "tokenId": "ID of the token to set the priorities for"
            }
          },
          "setValidParentForEquippableGroup(uint64,address,uint64)": {
            "params": {
              "equippableGroupId": "ID of the equippable group",
              "parentAddress": "Address of the parent into which the equippable group can be equipped into",
              "partId": "ID of the `Slot` that the items belonging to the equippable group can be equipped into"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
          },
          "symbol()": {
            "returns": {
              "_0": "Symbol of the collection"
            }
          },
          "totalAssets()": {
            "returns": {
              "_0": "The total number of assets"
            }
          },
          "totalSupply()": {
            "returns": {
              "_0": "The number of tokens in a collection"
            }
          },
          "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
            "details": "When transferring a child token, the owner of the token is set to `to`, or is not updated in the event of  `to` being the `0x0` address.",
            "params": {
              "childAddress": "Address of the child token's collection smart contract.",
              "childId": "ID of the child token in its own collection smart contract.",
              "childIndex": "Index of a token we are transferring, in the array it belongs to (can be either active array or  pending array)",
              "data": "Additional data with no specified format, sent in call to `_to`",
              "destinationId": "ID of the token to receive this child token (MUST be 0 if the destination is not a token)",
              "isPending": "A boolean value indicating whether the child token being transferred is in the pending array of  the parent token (`true`) or in the active array (`false`)",
              "to": "Address to which to transfer the token to",
              "tokenId": "ID of the parent token from which the child token is being transferred"
            }
          },
          "transferFrom(address,address,uint256)": {
            "details": "Requirements:  - `from` cannot be the zero address.  - `to` cannot be the zero address.  - `tokenId` token must be owned by `from`.  - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.Emits a {Transfer} event.",
            "params": {
              "from": "Address from which to transfer the token from",
              "to": "Address to which to transfer the token to",
              "tokenId": "ID of the token to transfer"
            }
          },
          "transferOwnership(address)": {
            "details": "Can only be called by the current owner.",
            "params": {
              "newOwner": "Address of the new owner's account"
            }
          },
          "unequip(uint256,uint64,uint64)": {
            "details": "This can only be called by the owner of the token or by an account that has been granted permission to  manage the given token by the current owner.",
            "params": {
              "assetId": "ID of the parent's asset that contains the `Slot` into which the child is equipped",
              "slotPartId": "ID of the `Slot` from which to unequip the child",
              "tokenId": "ID of the parent from which the child is being unequipped"
            }
          },
          "updateRoyaltyRecipient(address)": {
            "details": "Custom access control has to be implemented to ensure that only the intended actors can update the  beneficiary.",
            "params": {
              "newRoyaltyRecipient": "Address of the new recipient of royalties"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "VERSION()": {
            "notice": "Version of the @rmrk-team/evm-contracts package"
          },
          "acceptAsset(uint256,uint256,uint64)": {
            "notice": "Accepts a asset at from the pending array of given token."
          },
          "acceptChild(uint256,uint256,address,uint256)": {
            "notice": "Used to accept a pending child token for a given parent token."
          },
          "addAssetEntry(string)": {
            "notice": "Used to add a asset entry."
          },
          "addAssetToToken(uint256,uint64,uint64)": {
            "notice": "Used to add an asset to a token."
          },
          "addChild(uint256,uint256,bytes)": {
            "notice": "Used to add a child token to a given parent token."
          },
          "addEquippableAssetEntry(uint64,address,string,uint64[])": {
            "notice": "Used to add an equippable asset entry."
          },
          "approve(address,uint256)": {
            "notice": "Used to grant a one-time approval to manage one's token."
          },
          "approveForAssets(address,uint256)": {
            "notice": "Used to grant approvals for specific tokens to a specified address."
          },
          "balanceOf(address)": {
            "notice": "Used to retrieve the number of tokens in `owner`'s account."
          },
          "burn(uint256)": {
            "notice": "Used to burn a given token."
          },
          "burn(uint256,uint256)": {
            "notice": "Used to burn a given token."
          },
          "canTokenBeEquippedWithAssetIntoSlot(address,uint256,uint64,uint64)": {
            "notice": "Used to verify whether a token can be equipped into a given parent's slot."
          },
          "childOf(uint256,uint256)": {
            "notice": "Used to retrieve a specific active child token for a given parent token."
          },
          "childrenOf(uint256)": {
            "notice": "Used to retrieve the active child tokens of a given parent token."
          },
          "collectionMetadata()": {
            "notice": "Used to retrieve the metadata of the collection."
          },
          "directOwnerOf(uint256)": {
            "notice": "Used to retrieve the immediate owner of the given token."
          },
          "equip((uint256,uint256,uint64,uint64,uint64))": {
            "notice": "Used to equip a child into a token."
          },
          "getActiveAssetPriorities(uint256)": {
            "notice": "Used to retrieve the priorities of the active resoources of a given token."
          },
          "getActiveAssets(uint256)": {
            "notice": "Used to retrieve IDs of the active assets of given token."
          },
          "getApproved(uint256)": {
            "notice": "Used to retrieve the account approved to manage given token."
          },
          "getApprovedForAssets(uint256)": {
            "notice": "Used to get the address of the user that is approved to manage the specified token from the current  owner."
          },
          "getAssetAndEquippableData(uint256,uint64)": {
            "notice": "Used to get the asset and equippable data associated with given `assetId`."
          },
          "getAssetMetadata(uint256,uint64)": {
            "notice": "Used to fetch the asset metadata of the specified token's active asset with the given index."
          },
          "getAssetReplacements(uint256,uint64)": {
            "notice": "Used to retrieve the asset that will be replaced if a given asset from the token's pending array  is accepted."
          },
          "getEquipment(uint256,address,uint64)": {
            "notice": "Used to get the Equipment object equipped into the specified slot of the desired token."
          },
          "getPendingAssets(uint256)": {
            "notice": "Used to retrieve IDs of the pending assets of given token."
          },
          "getRoyaltyPercentage()": {
            "notice": "Used to retrieve the specified royalty percentage."
          },
          "getRoyaltyRecipient()": {
            "notice": "Used to retrieve the recipient of royalties."
          },
          "isApprovedForAll(address,address)": {
            "notice": "Used to check if the given address is allowed to manage the tokens of the specified address."
          },
          "isApprovedForAllForAssets(address,address)": {
            "notice": "Used to check whether the address has been granted the operator role by a given address or not."
          },
          "isChildEquipped(uint256,address,uint256)": {
            "notice": "Used to check whether the token has a given child equipped."
          },
          "isContributor(address)": {
            "notice": "Used to check if the address is one of the contributors."
          },
          "manageContributor(address,bool)": {
            "notice": "Adds or removes a contributor to the smart contract."
          },
          "maxSupply()": {
            "notice": "Used to retrieve the maximum supply of the collection."
          },
          "name()": {
            "notice": "Used to retrieve the collection name."
          },
          "nestTransferFrom(address,address,uint256,uint256,bytes)": {
            "notice": "Used to transfer the token into another token."
          },
          "owner()": {
            "notice": "Returns the address of the current owner."
          },
          "ownerOf(uint256)": {
            "notice": "Used to retrieve the *root* owner of a given token."
          },
          "pendingChildOf(uint256,uint256)": {
            "notice": "Used to retrieve a specific pending child token from a given parent token."
          },
          "pendingChildrenOf(uint256)": {
            "notice": "Used to retrieve the pending child tokens of a given parent token."
          },
          "rejectAllAssets(uint256,uint256)": {
            "notice": "Rejects all assets from the pending array of a given token."
          },
          "rejectAllChildren(uint256,uint256)": {
            "notice": "Used to reject all pending children of a given parent token."
          },
          "rejectAsset(uint256,uint256,uint64)": {
            "notice": "Rejects a asset from the pending array of given token."
          },
          "renounceOwnership()": {
            "notice": "Leaves the contract without owner. Functions using the `onlyOwner` modifier will be disabled."
          },
          "royaltyInfo(uint256,uint256)": {
            "notice": "Used to retrieve the information about who shall receive royalties of a sale of the specified token and  how much they will be."
          },
          "safeTransferFrom(address,address,uint256)": {
            "notice": "Used to safely transfer a given token token from `from` to `to`."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "notice": "Used to safely transfer a given token token from `from` to `to`."
          },
          "setApprovalForAll(address,bool)": {
            "notice": "Used to approve or remove `operator` as an operator for the caller."
          },
          "setApprovalForAllForAssets(address,bool)": {
            "notice": "Used to add or remove an operator of assets for the caller."
          },
          "setPriority(uint256,uint64[])": {
            "notice": "Sets a new priority array for a given token."
          },
          "setValidParentForEquippableGroup(uint64,address,uint64)": {
            "notice": "Used to declare that the assets belonging to a given `equippableGroupId` are equippable into the `Slot`  associated with the `partId` of the collection at the specified `parentAddress`"
          },
          "symbol()": {
            "notice": "Used to retrieve the collection symbol."
          },
          "totalAssets()": {
            "notice": "Used to retrieve the total number of assets."
          },
          "totalSupply()": {
            "notice": "Used to retrieve the total supply of the tokens in a collection."
          },
          "transferChild(uint256,address,uint256,uint256,address,uint256,bool,bytes)": {
            "notice": "Used to transfer a child token from a given parent token."
          },
          "transferFrom(address,address,uint256)": {
            "notice": "Transfers a given token from `from` to `to`."
          },
          "transferOwnership(address)": {
            "notice": "Transfers ownership of the contract to a new owner."
          },
          "unequip(uint256,uint64,uint64)": {
            "notice": "Used to unequip child from parent token."
          },
          "updateRoyaltyRecipient(address)": {
            "notice": "Used to update recipient of royalties."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@latticexyz/=node_modules/@latticexyz/",
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@rmrk-team/=node_modules/@rmrk-team/",
        "eth-gas-reporter/=node_modules/eth-gas-reporter/",
        "hardhat-deploy/=node_modules/hardhat-deploy/",
        "hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@rmrk-team/evm-contracts/contracts/implementations/abstract/RMRKAbstractEquippable.sol": "RMRKAbstractEquippable"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@openzeppelin/contracts/interfaces/IERC2981.sol": {
        "keccak256": "0x3976825a61df20457730b79ad0ac9c8908e3c7978ed9bf090c67137c91256b5c",
        "urls": [
          "bzz-raw://0f3fe369b6d0e101844b425f1d08e35bf512962d0590b1f80decb8130c9a6890",
          "dweb:/ipfs/QmXCan6wX4qwJkdR1VvsYLeq8JTB2YxRHLucpuXpsKAvzQ"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol": {
        "keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
        "urls": [
          "bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
          "dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
        "keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
        "urls": [
          "bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
          "dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
        "keccak256": "0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9",
        "urls": [
          "bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146",
          "dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Address.sol": {
        "keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
        "urls": [
          "bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
          "dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol": {
        "keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
        "urls": [
          "bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
          "dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
        ],
        "license": "MIT"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/access/Ownable.sol": {
        "keccak256": "0x7c46c3ab469e5f6b95fc1126946b03708bb9d0943da3a4f97bf4d94309cc5c67",
        "urls": [
          "bzz-raw://d91938cd5c1fb62551e40cb27c2dbc54ba28e4d844fc1f66e10aab9d96b1f308",
          "dweb:/ipfs/QmevebZjAcMqW4URCczoW9QxTo8x8zCwfVemuRLow3a4Uq"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/catalog/IRMRKCatalog.sol": {
        "keccak256": "0xf14074edcd3bcef665f17659d206465bd9ea5cd7999acf28065e623f88f04a86",
        "urls": [
          "bzz-raw://c967f0cc9fbf3dd16f8759d051220e750b8fca69ec503f33bf25c95ef5486403",
          "dweb:/ipfs/QmecpKwQKAPrd85Pi2jKTWfEjFrg2ZudjmMNEFhtxRbrat"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/core/RMRKCore.sol": {
        "keccak256": "0x2aed82db53e50724cefa3ee8ca62e7b9e4fb170a2b324cd5f518914480ba9b5b",
        "urls": [
          "bzz-raw://962a4c262e1710c8b0f3bb94f77513ee3aa1e561c85d9acb06960f36ede3bba7",
          "dweb:/ipfs/QmTQKxurANXy8HCtdLLcaxfwCPMoVJPKpYxtsj9CwiYQaZ"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/equippable/IERC6220.sol": {
        "keccak256": "0x4fcd6ea56d18b4daee46873794c002ad78160ba4a07d4f49362313c38ec0e28a",
        "urls": [
          "bzz-raw://bbc28006dd8439bc0e1f332679d36a4c8b8a46ae2e4f37a5e4c0bdaaab85655e",
          "dweb:/ipfs/QmU1eN6R97EhpUUsQWD4qoz3KCsyMHZ8GvihVPnAoEk5dU"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/equippable/RMRKMinifiedEquippable.sol": {
        "keccak256": "0x7c2d756ea5956cd7c479c611d04082ef4267b8e65e99b884b84e08d7fb685c2c",
        "urls": [
          "bzz-raw://11645970f49c04f04b316c312b597138d9277cb0d7bfce4a21a06c34d8be0f68",
          "dweb:/ipfs/QmYAUiH4fpYPWwiuLHTMpDXEtp7Vbieoo3XaAee4BUBG8c"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/extension/RMRKRoyalties.sol": {
        "keccak256": "0xf744b49d208b4d1e6c00ceb4650cb2c9e6b1ef547d4aaf80045f398b1154a4a6",
        "urls": [
          "bzz-raw://896b29ade2d173ed093d94bc3d2880b748c37bf050dfac6bf1db42e035258203",
          "dweb:/ipfs/QmXbK7E3LTKxGquetSn5tWFpiFDDjFBWW4Lw7KwgT1x4T4"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/library/RMRKErrors.sol": {
        "keccak256": "0x7d6a3648047dca37d1e21550c723d960e4c9d3783e3d0efb84602266cce45b35",
        "urls": [
          "bzz-raw://170064f8e2d6211e251a7610236beada23c8c598987cb3dbd62826007a4ca553",
          "dweb:/ipfs/QmSgM9T5Q2azFicGQsiXPG8YZSiDEGgRYeHBUe2iAcP3gN"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/library/RMRKLib.sol": {
        "keccak256": "0x953bb028766f17fdafddd5a49b47d76058c4a8e18dee358a51ebe6a2927033db",
        "urls": [
          "bzz-raw://40bb3aec2b5942591536a3d4428cb08154f7ab80d3b94c3e4ccf85ca053606d8",
          "dweb:/ipfs/QmdyYsoYthTGFjcEQ35Ra57qmywiXh6UxDCyvAJZGKsUJH"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/multiasset/IERC5773.sol": {
        "keccak256": "0x4e5b78824f54620c5b610a5e2c944cd159b8b054065fabf3af2aaea2f3360d89",
        "urls": [
          "bzz-raw://713b179262117f3ff772aed51aa26e48bf7e3ff5c7ec6588060a887e634fe0f1",
          "dweb:/ipfs/Qme2B9DrgB93HPQy96Pia23jzrkdmUrVQPHdAqCxA8dzYY"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/nestable/IERC7401.sol": {
        "keccak256": "0x5feb73f09676b2961b45e5f165d95ff8197609e01e115590a627a47940690fb3",
        "urls": [
          "bzz-raw://93ea41ba10af02b385dbbe036e85f286f6f923e8adea11eb28ed21890a1fe953",
          "dweb:/ipfs/QmRgJKeYyh8VNNtdKF5Pcyei1qKDKNE5zmvXRt3Txoapfo"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/security/ReentrancyGuard.sol": {
        "keccak256": "0x14a91bf4e2ca7a5423b903c551aedb08c98f9d089e429998f9711286c0c17882",
        "urls": [
          "bzz-raw://4e07319bbc8447047f9fa596d1af95ab5d235661b5f48159eaee6144d45261f0",
          "dweb:/ipfs/QmdAvUL5jmAx9ExoyR6199KUmkXfd8q4SfBuvJXygKHNbx"
        ],
        "license": "MIT"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/implementations/abstract/RMRKAbstractEquippable.sol": {
        "keccak256": "0x0d61ad2493dd5b867d94a0a0413b280952ea588b42e2184ca6e7c1ab6de086bd",
        "urls": [
          "bzz-raw://00eb350ef9e89c56cc5b869fffc7594039a1d889cf84d41587f3c581e6684cc7",
          "dweb:/ipfs/QmcZmdeghW4NBck12J1e5Sq1zUk8Wz1AvsZ2JyAEVUvpZU"
        ],
        "license": "Apache-2.0"
      },
      "node_modules/@rmrk-team/evm-contracts/contracts/implementations/utils/RMRKImplementationBase.sol": {
        "keccak256": "0x56657e977934e300a17ad4db49f01730abcefed4f6eba3549b951e14dda18d5e",
        "urls": [
          "bzz-raw://585ccce5f8bab950cafad9f5d003443bddd2053357aa4a1f9bd73fbf3f421a77",
          "dweb:/ipfs/QmZocW2chh1gfFQyHpFKWpYJK2vapqtC2yVcq13XFDYNFG"
        ],
        "license": "Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "node_modules/@rmrk-team/evm-contracts/contracts/implementations/abstract/RMRKAbstractEquippable.sol",
    "id": 41050,
    "exportedSymbols": {
      "Address": [
        28171
      ],
      "Context": [
        28193
      ],
      "ERC721AddressZeroIsNotaValidOwner": [
        33549
      ],
      "ERC721ApprovalToCurrentOwner": [
        33552
      ],
      "ERC721ApproveCallerIsNotOwnerNorApprovedForAll": [
        33555
      ],
      "ERC721ApproveToCaller": [
        33561
      ],
      "ERC721ApprovedQueryForNonexistentToken": [
        33558
      ],
      "ERC721InvalidTokenId": [
        33564
      ],
      "ERC721MintToTheZeroAddress": [
        33567
      ],
      "ERC721NotApprovedOrOwner": [
        33570
      ],
      "ERC721TokenAlreadyMinted": [
        33573
      ],
      "ERC721TransferFromIncorrectOwner": [
        33576
      ],
      "ERC721TransferToNonReceiverImplementer": [
        33579
      ],
      "ERC721TransferToTheZeroAddress": [
        33582
      ],
      "IERC165": [
        28205
      ],
      "IERC2981": [
        27680
      ],
      "IERC5773": [
        34868
      ],
      "IERC6220": [
        28682
      ],
      "IERC721": [
        27796
      ],
      "IERC721Metadata": [
        27841
      ],
      "IERC721Receiver": [
        27814
      ],
      "IERC7401": [
        35078
      ],
      "IRMRKCatalog": [
        28530
      ],
      "Ownable": [
        28413
      ],
      "RMRKAbstractEquippable": [
        41049
      ],
      "RMRKApprovalForAssetsToCurrentOwner": [
        33585
      ],
      "RMRKApproveForAssetsCallerIsNotOwnerNorApprovedForAll": [
        33588
      ],
      "RMRKAssetAlreadyExists": [
        33745
      ],
      "RMRKBadConfig": [
        33591
      ],
      "RMRKBadPriorityListLength": [
        33594
      ],
      "RMRKCanOnlyDoBulkOperationsOnOwnedTokens": [
        33784
      ],
      "RMRKCanOnlyDoBulkOperationsWithOneTokenAtATime": [
        33787
      ],
      "RMRKCannotTransferSoulbound": [
        33600
      ],
      "RMRKCatalogRequiredForParts": [
        33597
      ],
      "RMRKChildAlreadyExists": [
        33603
      ],
      "RMRKChildIndexOutOfRange": [
        33606
      ],
      "RMRKChildNotFoundInParent": [
        33609
      ],
      "RMRKCollaboratorArraysNotEqualLength": [
        33612
      ],
      "RMRKCollectionAlreadyRegistered": [
        33615
      ],
      "RMRKCollectionNotRegistered": [
        33618
      ],
      "RMRKCore": [
        28541
      ],
      "RMRKEquippableEquipNotAllowedByCatalog": [
        33621
      ],
      "RMRKExpiredDeadline": [
        33624
      ],
      "RMRKIdZeroForbidden": [
        33627
      ],
      "RMRKImplementationBase": [
        41230
      ],
      "RMRKIndexOutOfRange": [
        33630
      ],
      "RMRKInvalidChildReclaim": [
        33633
      ],
      "RMRKInvalidSignature": [
        33636
      ],
      "RMRKIsNotContract": [
        33639
      ],
      "RMRKLib": [
        33873
      ],
      "RMRKLocked": [
        33642
      ],
      "RMRKMaxPendingAssetsReached": [
        33648
      ],
      "RMRKMaxPendingChildrenReached": [
        33645
      ],
      "RMRKMaxRecursiveBurnsReached": [
        33655
      ],
      "RMRKMinifiedEquippable": [
        33350
      ],
      "RMRKMintOverMax": [
        33658
      ],
      "RMRKMintToNonRMRKNestableImplementer": [
        33661
      ],
      "RMRKMintZero": [
        33664
      ],
      "RMRKMismachedArrayLength": [
        33667
      ],
      "RMRKMustUnequipFirst": [
        33670
      ],
      "RMRKNestableTooDeep": [
        33673
      ],
      "RMRKNestableTransferToDescendant": [
        33676
      ],
      "RMRKNestableTransferToNonRMRKNestableImplementer": [
        33679
      ],
      "RMRKNestableTransferToSelf": [
        33682
      ],
      "RMRKNewContributorIsZeroAddress": [
        33724
      ],
      "RMRKNewOwnerIsZeroAddress": [
        33721
      ],
      "RMRKNoAssetMatchingId": [
        33685
      ],
      "RMRKNotApprovedForAssetsOrOwner": [
        33688
      ],
      "RMRKNotApprovedOrDirectOwner": [
        33691
      ],
      "RMRKNotCollectionCollaborator": [
        33694
      ],
      "RMRKNotCollectionIssuer": [
        33697
      ],
      "RMRKNotCollectionIssuerOrCollaborator": [
        33700
      ],
      "RMRKNotComposableAsset": [
        33703
      ],
      "RMRKNotEquipped": [
        33706
      ],
      "RMRKNotOwner": [
        33709
      ],
      "RMRKNotOwnerOrContributor": [
        33712
      ],
      "RMRKNotSpecificAddress": [
        33715
      ],
      "RMRKNotTokenOwner": [
        33718
      ],
      "RMRKOwnableNotImplemented": [
        33727
      ],
      "RMRKParentIsNotNFT": [
        33730
      ],
      "RMRKPartAlreadyExists": [
        33733
      ],
      "RMRKPartDoesNotExist": [
        33736
      ],
      "RMRKPartIsNotSlot": [
        33739
      ],
      "RMRKPendingChildIndexOutOfRange": [
        33742
      ],
      "RMRKRoyalties": [
        33446
      ],
      "RMRKRoyaltiesTooHigh": [
        33781
      ],
      "RMRKSlotAlreadyUsed": [
        33748
      ],
      "RMRKTargetAssetCannotReceiveSlot": [
        33751
      ],
      "RMRKTokenCannotBeEquippedWithAssetIntoSlot": [
        33754
      ],
      "RMRKTokenDoesNotHaveAsset": [
        33757
      ],
      "RMRKTokenHasNoAssets": [
        33760
      ],
      "RMRKUnexpectedAssetId": [
        33772
      ],
      "RMRKUnexpectedChildId": [
        33763
      ],
      "RMRKUnexpectedNumberOfAssets": [
        33766
      ],
      "RMRKUnexpectedNumberOfChildren": [
        33769
      ],
      "RMRKUnexpectedParent": [
        33775
      ],
      "RMRKWrongValueSent": [
        33790
      ],
      "RMRKZeroLengthIdsPassed": [
        33778
      ],
      "ReentrancyGuard": [
        37419
      ],
      "RentrantCall": [
        37372
      ]
    },
    "nodeType": "SourceUnit",
    "src": "40:5015:95",
    "nodes": [
      {
        "id": 40832,
        "nodeType": "PragmaDirective",
        "src": "40:24:95",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".21"
        ]
      },
      {
        "id": 40833,
        "nodeType": "ImportDirective",
        "src": "66:77:95",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "file": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 41050,
        "sourceUnit": 27842,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 40834,
        "nodeType": "ImportDirective",
        "src": "144:58:95",
        "nodes": [],
        "absolutePath": "node_modules/@rmrk-team/evm-contracts/contracts/RMRK/equippable/RMRKMinifiedEquippable.sol",
        "file": "../../RMRK/equippable/RMRKMinifiedEquippable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 41050,
        "sourceUnit": 33351,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 40835,
        "nodeType": "ImportDirective",
        "src": "203:45:95",
        "nodes": [],
        "absolutePath": "node_modules/@rmrk-team/evm-contracts/contracts/implementations/utils/RMRKImplementationBase.sol",
        "file": "../utils/RMRKImplementationBase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 41050,
        "sourceUnit": 41231,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 41049,
        "nodeType": "ContractDefinition",
        "src": "373:4681:95",
        "nodes": [
          {
            "id": 40859,
            "nodeType": "FunctionDefinition",
            "src": "1045:226:95",
            "nodes": [],
            "body": {
              "id": 40858,
              "nodeType": "Block",
              "src": "1199:72:95",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 40853,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40843,
                        "src": "1226:7:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 40854,
                        "name": "assetId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40845,
                        "src": "1235:7:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 40855,
                        "name": "replacesAssetWithId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40847,
                        "src": "1244:19:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 40852,
                      "name": "_addAssetToToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32161,
                      "src": "1209:16:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint64_$_t_uint64_$returns$__$",
                        "typeString": "function (uint256,uint64,uint64)"
                      }
                    },
                    "id": 40856,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1209:55:95",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 40857,
                  "nodeType": "ExpressionStatement",
                  "src": "1209:55:95"
                }
              ]
            },
            "documentation": {
              "id": 40841,
              "nodeType": "StructuredDocumentation",
              "src": "478:562:95",
              "text": " @notice Used to add an asset to a token.\n @dev If the given asset is already added to the token, the execution will be reverted.\n @dev If the asset ID is invalid, the execution will be reverted.\n @dev If the token already has the maximum amount of pending assets (128), the execution will be\n  reverted.\n @param tokenId ID of the token to add the asset to\n @param assetId ID of the asset to add to the token\n @param replacesAssetWithId ID of the asset to replace from the token's list of active assets"
            },
            "functionSelector": "1c7bb461",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 40850,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 40849,
                  "name": "onlyOwnerOrContributor",
                  "nameLocations": [
                    "1176:22:95"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28240,
                  "src": "1176:22:95"
                },
                "nodeType": "ModifierInvocation",
                "src": "1176:22:95"
              }
            ],
            "name": "addAssetToToken",
            "nameLocation": "1054:15:95",
            "parameters": {
              "id": 40848,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40843,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "1087:7:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40859,
                  "src": "1079:15:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 40842,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1079:7:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40845,
                  "mutability": "mutable",
                  "name": "assetId",
                  "nameLocation": "1111:7:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40859,
                  "src": "1104:14:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 40844,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1104:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40847,
                  "mutability": "mutable",
                  "name": "replacesAssetWithId",
                  "nameLocation": "1135:19:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40859,
                  "src": "1128:26:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 40846,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1128:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1069:91:95"
            },
            "returnParameters": {
              "id": 40851,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1199:0:95"
            },
            "scope": 41049,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 40894,
            "nodeType": "FunctionDefinition",
            "src": "1806:496:95",
            "nodes": [],
            "body": {
              "id": 40893,
              "nodeType": "Block",
              "src": "2035:267:95",
              "nodes": [],
              "statements": [
                {
                  "id": 40879,
                  "nodeType": "UncheckedBlock",
                  "src": "2045:49:95",
                  "statements": [
                    {
                      "expression": {
                        "id": 40877,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "2069:14:95",
                        "subExpression": {
                          "id": 40876,
                          "name": "_totalAssets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41073,
                          "src": "2071:12:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 40878,
                      "nodeType": "ExpressionStatement",
                      "src": "2069:14:95"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 40883,
                            "name": "_totalAssets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41073,
                            "src": "2138:12:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 40882,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2131:6:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 40881,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "2131:6:95",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 40884,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2131:20:95",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 40885,
                        "name": "equippableGroupId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40862,
                        "src": "2165:17:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 40886,
                        "name": "catalogAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40864,
                        "src": "2196:14:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 40887,
                        "name": "metadataURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40866,
                        "src": "2224:11:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "id": 40888,
                        "name": "partIds",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40869,
                        "src": "2249:7:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint64_$dyn_memory_ptr",
                          "typeString": "uint64[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        },
                        {
                          "typeIdentifier": "t_array$_t_uint64_$dyn_memory_ptr",
                          "typeString": "uint64[] memory"
                        }
                      ],
                      "id": 40880,
                      "name": "_addAssetEntry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        32049,
                        32786
                      ],
                      "referencedDeclaration": 32786,
                      "src": "2103:14:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint64_$_t_uint64_$_t_address_$_t_string_memory_ptr_$_t_array$_t_uint64_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (uint64,uint64,address,string memory,uint64[] memory)"
                      }
                    },
                    "id": 40889,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2103:163:95",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 40890,
                  "nodeType": "ExpressionStatement",
                  "src": "2103:163:95"
                },
                {
                  "expression": {
                    "id": 40891,
                    "name": "_totalAssets",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 41073,
                    "src": "2283:12:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 40875,
                  "id": 40892,
                  "nodeType": "Return",
                  "src": "2276:19:95"
                }
              ]
            },
            "documentation": {
              "id": 40860,
              "nodeType": "StructuredDocumentation",
              "src": "1277:524:95",
              "text": " @notice Used to add an equippable asset entry.\n @dev The ID of the asset is automatically assigned to be the next available asset ID.\n @param equippableGroupId ID of the equippable group\n @param catalogAddress Address of the `Catalog` smart contract this asset belongs to\n @param metadataURI Metadata URI of the asset\n @param partIds An array of IDs of fixed and slot parts to be included in the asset\n @return The total number of assets after this asset has been added"
            },
            "functionSelector": "2452cd91",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 40872,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 40871,
                  "name": "onlyOwnerOrContributor",
                  "nameLocations": [
                    "1994:22:95"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28240,
                  "src": "1994:22:95"
                },
                "nodeType": "ModifierInvocation",
                "src": "1994:22:95"
              }
            ],
            "name": "addEquippableAssetEntry",
            "nameLocation": "1815:23:95",
            "parameters": {
              "id": 40870,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40862,
                  "mutability": "mutable",
                  "name": "equippableGroupId",
                  "nameLocation": "1855:17:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40894,
                  "src": "1848:24:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 40861,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "1848:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40864,
                  "mutability": "mutable",
                  "name": "catalogAddress",
                  "nameLocation": "1890:14:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40894,
                  "src": "1882:22:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 40863,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1882:7:95",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40866,
                  "mutability": "mutable",
                  "name": "metadataURI",
                  "nameLocation": "1928:11:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40894,
                  "src": "1914:25:95",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 40865,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1914:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40869,
                  "mutability": "mutable",
                  "name": "partIds",
                  "nameLocation": "1965:7:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40894,
                  "src": "1949:23:95",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint64_$dyn_memory_ptr",
                    "typeString": "uint64[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 40867,
                      "name": "uint64",
                      "nodeType": "ElementaryTypeName",
                      "src": "1949:6:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "id": 40868,
                    "nodeType": "ArrayTypeName",
                    "src": "1949:8:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint64_$dyn_storage_ptr",
                      "typeString": "uint64[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1838:140:95"
            },
            "returnParameters": {
              "id": 40875,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40874,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 40894,
                  "src": "2026:7:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 40873,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2026:7:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2025:9:95"
            },
            "scope": 41049,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 40919,
            "nodeType": "FunctionDefinition",
            "src": "2554:273:95",
            "nodes": [],
            "body": {
              "id": 40918,
              "nodeType": "Block",
              "src": "2674:153:95",
              "nodes": [],
              "statements": [
                {
                  "id": 40907,
                  "nodeType": "UncheckedBlock",
                  "src": "2684:49:95",
                  "statements": [
                    {
                      "expression": {
                        "id": 40905,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": true,
                        "src": "2708:14:95",
                        "subExpression": {
                          "id": 40904,
                          "name": "_totalAssets",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41073,
                          "src": "2710:12:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 40906,
                      "nodeType": "ExpressionStatement",
                      "src": "2708:14:95"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 40911,
                            "name": "_totalAssets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41073,
                            "src": "2764:12:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 40910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "2757:6:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint64_$",
                            "typeString": "type(uint64)"
                          },
                          "typeName": {
                            "id": 40909,
                            "name": "uint64",
                            "nodeType": "ElementaryTypeName",
                            "src": "2757:6:95",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 40912,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2757:20:95",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 40913,
                        "name": "metadataURI",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40897,
                        "src": "2779:11:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 40908,
                      "name": "_addAssetEntry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        32049,
                        32786
                      ],
                      "referencedDeclaration": 32049,
                      "src": "2742:14:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint64_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (uint64,string memory)"
                      }
                    },
                    "id": 40914,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2742:49:95",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 40915,
                  "nodeType": "ExpressionStatement",
                  "src": "2742:49:95"
                },
                {
                  "expression": {
                    "id": 40916,
                    "name": "_totalAssets",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 41073,
                    "src": "2808:12:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 40903,
                  "id": 40917,
                  "nodeType": "Return",
                  "src": "2801:19:95"
                }
              ]
            },
            "documentation": {
              "id": 40895,
              "nodeType": "StructuredDocumentation",
              "src": "2308:241:95",
              "text": " @notice Used to add a asset entry.\n @dev The ID of the asset is automatically assigned to be the next available asset ID.\n @param metadataURI Metadata URI of the asset\n @return ID of the newly added asset"
            },
            "functionSelector": "30ffb1d6",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 40900,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 40899,
                  "name": "onlyOwnerOrContributor",
                  "nameLocations": [
                    "2633:22:95"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28240,
                  "src": "2633:22:95"
                },
                "nodeType": "ModifierInvocation",
                "src": "2633:22:95"
              }
            ],
            "name": "addAssetEntry",
            "nameLocation": "2563:13:95",
            "parameters": {
              "id": 40898,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40897,
                  "mutability": "mutable",
                  "name": "metadataURI",
                  "nameLocation": "2600:11:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40919,
                  "src": "2586:25:95",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 40896,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2586:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2576:41:95"
            },
            "returnParameters": {
              "id": 40903,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40902,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 40919,
                  "src": "2665:7:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 40901,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2665:7:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2664:9:95"
            },
            "scope": 41049,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 40938,
            "nodeType": "FunctionDefinition",
            "src": "3326:312:95",
            "nodes": [],
            "body": {
              "id": 40937,
              "nodeType": "Block",
              "src": "3500:138:95",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 40932,
                        "name": "equippableGroupId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40922,
                        "src": "3557:17:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 40933,
                        "name": "parentAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40924,
                        "src": "3588:13:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 40934,
                        "name": "partId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40926,
                        "src": "3615:6:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "id": 40931,
                      "name": "_setValidParentForEquippableGroup",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 33209,
                      "src": "3510:33:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint64_$_t_address_$_t_uint64_$returns$__$",
                        "typeString": "function (uint64,address,uint64)"
                      }
                    },
                    "id": 40935,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3510:121:95",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 40936,
                  "nodeType": "ExpressionStatement",
                  "src": "3510:121:95"
                }
              ]
            },
            "documentation": {
              "id": 40920,
              "nodeType": "StructuredDocumentation",
              "src": "2833:488:95",
              "text": " @notice Used to declare that the assets belonging to a given `equippableGroupId` are equippable into the `Slot`\n  associated with the `partId` of the collection at the specified `parentAddress`\n @param equippableGroupId ID of the equippable group\n @param parentAddress Address of the parent into which the equippable group can be equipped into\n @param partId ID of the `Slot` that the items belonging to the equippable group can be equipped into"
            },
            "functionSelector": "65b67eb9",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 40929,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 40928,
                  "name": "onlyOwnerOrContributor",
                  "nameLocations": [
                    "3477:22:95"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 28240,
                  "src": "3477:22:95"
                },
                "nodeType": "ModifierInvocation",
                "src": "3477:22:95"
              }
            ],
            "name": "setValidParentForEquippableGroup",
            "nameLocation": "3335:32:95",
            "parameters": {
              "id": 40927,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40922,
                  "mutability": "mutable",
                  "name": "equippableGroupId",
                  "nameLocation": "3384:17:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40938,
                  "src": "3377:24:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 40921,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3377:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40924,
                  "mutability": "mutable",
                  "name": "parentAddress",
                  "nameLocation": "3419:13:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40938,
                  "src": "3411:21:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 40923,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3411:7:95",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40926,
                  "mutability": "mutable",
                  "name": "partId",
                  "nameLocation": "3449:6:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40938,
                  "src": "3442:13:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 40925,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3442:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3367:94:95"
            },
            "returnParameters": {
              "id": 40930,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3500:0:95"
            },
            "scope": 41049,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 40971,
            "nodeType": "FunctionDefinition",
            "src": "3687:343:95",
            "nodes": [],
            "body": {
              "id": 40970,
              "nodeType": "Block",
              "src": "3792:238:95",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 40968,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "id": 40964,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 40957,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [
                            {
                              "id": 40949,
                              "name": "interfaceId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40941,
                              "src": "3845:11:95",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            ],
                            "expression": {
                              "id": 40947,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -25,
                              "src": "3821:5:95",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_super$_RMRKAbstractEquippable_$41049_$",
                                "typeString": "type(contract super RMRKAbstractEquippable)"
                              }
                            },
                            "id": 40948,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3827:17:95",
                            "memberName": "supportsInterface",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 32420,
                            "src": "3821:23:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                              "typeString": "function (bytes4) view returns (bool)"
                            }
                          },
                          "id": 40950,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3821:36:95",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "||",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          },
                          "id": 40956,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 40951,
                            "name": "interfaceId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40941,
                            "src": "3873:11:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "arguments": [
                                {
                                  "id": 40953,
                                  "name": "IERC2981",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 27680,
                                  "src": "3893:8:95",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_contract$_IERC2981_$27680_$",
                                    "typeString": "type(contract IERC2981)"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_type$_t_contract$_IERC2981_$27680_$",
                                    "typeString": "type(contract IERC2981)"
                                  }
                                ],
                                "id": 40952,
                                "name": "type",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -27,
                                "src": "3888:4:95",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                  "typeString": "function () pure"
                                }
                              },
                              "id": 40954,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3888:14:95",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_meta_type_t_contract$_IERC2981_$27680",
                                "typeString": "type(contract IERC2981)"
                              }
                            },
                            "id": 40955,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "3903:11:95",
                            "memberName": "interfaceId",
                            "nodeType": "MemberAccess",
                            "src": "3888:26:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            }
                          },
                          "src": "3873:41:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "3821:93:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "||",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 40963,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 40958,
                          "name": "interfaceId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40941,
                          "src": "3930:11:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "arguments": [
                              {
                                "id": 40960,
                                "name": "IERC721Metadata",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 27841,
                                "src": "3950:15:95",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$27841_$",
                                  "typeString": "type(contract IERC721Metadata)"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$27841_$",
                                  "typeString": "type(contract IERC721Metadata)"
                                }
                              ],
                              "id": 40959,
                              "name": "type",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -27,
                              "src": "3945:4:95",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                                "typeString": "function () pure"
                              }
                            },
                            "id": 40961,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3945:21:95",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$27841",
                              "typeString": "type(contract IERC721Metadata)"
                            }
                          },
                          "id": 40962,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "3967:11:95",
                          "memberName": "interfaceId",
                          "nodeType": "MemberAccess",
                          "src": "3945:33:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "src": "3930:48:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "src": "3821:157:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "id": 40967,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 40965,
                        "name": "interfaceId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40941,
                        "src": "3994:11:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "id": 40966,
                        "name": "RMRK_INTERFACE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 28540,
                        "src": "4009:14:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "src": "3994:29:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "3821:202:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 40946,
                  "id": 40969,
                  "nodeType": "Return",
                  "src": "3802:221:95"
                }
              ]
            },
            "baseFunctions": [
              32420
            ],
            "documentation": {
              "id": 40939,
              "nodeType": "StructuredDocumentation",
              "src": "3644:38:95",
              "text": " @inheritdoc IERC165"
            },
            "functionSelector": "01ffc9a7",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "3696:17:95",
            "overrides": {
              "id": 40943,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "3768:8:95"
            },
            "parameters": {
              "id": 40942,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40941,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "3730:11:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 40971,
                  "src": "3723:18:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 40940,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "3723:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3713:34:95"
            },
            "returnParameters": {
              "id": 40946,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40945,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 40971,
                  "src": "3786:4:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 40944,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "3786:4:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3785:6:95"
            },
            "scope": 41049,
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 41003,
            "nodeType": "FunctionDefinition",
            "src": "4036:306:95",
            "nodes": [],
            "body": {
              "id": 41002,
              "nodeType": "Block",
              "src": "4165:177:95",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 40984,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40973,
                        "src": "4202:4:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 40985,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40975,
                        "src": "4208:2:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 40986,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40977,
                        "src": "4212:7:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 40981,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "4175:5:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_RMRKAbstractEquippable_$41049_$",
                          "typeString": "type(contract super RMRKAbstractEquippable)"
                        }
                      },
                      "id": 40983,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4181:20:95",
                      "memberName": "_beforeTokenTransfer",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31590,
                      "src": "4175:26:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,address,uint256)"
                      }
                    },
                    "id": 40987,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4175:45:95",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 40988,
                  "nodeType": "ExpressionStatement",
                  "src": "4175:45:95"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 40994,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 40989,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40975,
                      "src": "4234:2:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 40992,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4248:1:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 40991,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4240:7:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 40990,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4240:7:95",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 40993,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4240:10:95",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "4234:16:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 41001,
                  "nodeType": "IfStatement",
                  "src": "4230:106:95",
                  "trueBody": {
                    "id": 41000,
                    "nodeType": "Block",
                    "src": "4252:84:95",
                    "statements": [
                      {
                        "id": 40999,
                        "nodeType": "UncheckedBlock",
                        "src": "4266:60:95",
                        "statements": [
                          {
                            "expression": {
                              "id": 40997,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "id": 40995,
                                "name": "_totalSupply",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 41069,
                                "src": "4294:12:95",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "-=",
                              "rightHandSide": {
                                "hexValue": "31",
                                "id": 40996,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4310:1:95",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "4294:17:95",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 40998,
                            "nodeType": "ExpressionStatement",
                            "src": "4294:17:95"
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              31590
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_beforeTokenTransfer",
            "nameLocation": "4045:20:95",
            "overrides": {
              "id": 40979,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4156:8:95"
            },
            "parameters": {
              "id": 40978,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40973,
                  "mutability": "mutable",
                  "name": "from",
                  "nameLocation": "4083:4:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 41003,
                  "src": "4075:12:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 40972,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4075:7:95",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40975,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "4105:2:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 41003,
                  "src": "4097:10:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 40974,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4097:7:95",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 40977,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "4125:7:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 41003,
                  "src": "4117:15:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 40976,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4117:7:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4065:73:95"
            },
            "returnParameters": {
              "id": 40980,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4165:0:95"
            },
            "scope": 41049,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "id": 41048,
            "nodeType": "FunctionDefinition",
            "src": "4348:704:95",
            "nodes": [],
            "body": {
              "id": 41047,
              "nodeType": "Block",
              "src": "4496:556:95",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 41016,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41005,
                        "src": "4534:7:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 41017,
                        "name": "assetId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41007,
                        "src": "4543:7:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      {
                        "id": 41018,
                        "name": "replacesAssetWithId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 41009,
                        "src": "4552:19:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        },
                        {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      ],
                      "expression": {
                        "id": 41013,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -25,
                        "src": "4506:5:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_super$_RMRKAbstractEquippable_$41049_$",
                          "typeString": "type(contract super RMRKAbstractEquippable)"
                        }
                      },
                      "id": 41015,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "4512:21:95",
                      "memberName": "_afterAddAssetToToken",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 32201,
                      "src": "4506:27:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint64_$_t_uint64_$returns$__$",
                        "typeString": "function (uint256,uint64,uint64)"
                      }
                    },
                    "id": 41019,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4506:66:95",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 41020,
                  "nodeType": "ExpressionStatement",
                  "src": "4506:66:95"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "id": 41033,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 41026,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "expression": {
                          "baseExpression": {
                            "id": 41021,
                            "name": "_activeAssets",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 31780,
                            "src": "4862:13:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint64_$dyn_storage_$",
                              "typeString": "mapping(uint256 => uint64[] storage ref)"
                            }
                          },
                          "id": 41023,
                          "indexExpression": {
                            "id": 41022,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41005,
                            "src": "4876:7:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4862:22:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint64_$dyn_storage",
                            "typeString": "uint64[] storage ref"
                          }
                        },
                        "id": 41024,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "4885:6:95",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "4862:29:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "hexValue": "30",
                        "id": 41025,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "4895:1:95",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_0_by_1",
                          "typeString": "int_const 0"
                        },
                        "value": "0"
                      },
                      "src": "4862:34:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "||",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "id": 41032,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 41027,
                          "name": "_msgSender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28183,
                          "src": "4912:10:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                            "typeString": "function () view returns (address)"
                          }
                        },
                        "id": 41028,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4912:12:95",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "arguments": [
                          {
                            "id": 41030,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41005,
                            "src": "4936:7:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 41029,
                          "name": "ownerOf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30505,
                          "src": "4928:7:95",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                            "typeString": "function (uint256) view returns (address)"
                          }
                        },
                        "id": 41031,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4928:16:95",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "src": "4912:32:95",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "4862:82:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 41046,
                  "nodeType": "IfStatement",
                  "src": "4845:201:95",
                  "trueBody": {
                    "id": 41045,
                    "nodeType": "Block",
                    "src": "4955:91:95",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 41035,
                              "name": "tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41005,
                              "src": "4982:7:95",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 41041,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 41036,
                                    "name": "_pendingAssets",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 31786,
                                    "src": "4991:14:95",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_array$_t_uint64_$dyn_storage_$",
                                      "typeString": "mapping(uint256 => uint64[] storage ref)"
                                    }
                                  },
                                  "id": 41038,
                                  "indexExpression": {
                                    "id": 41037,
                                    "name": "tokenId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 41005,
                                    "src": "5006:7:95",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4991:23:95",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint64_$dyn_storage",
                                    "typeString": "uint64[] storage ref"
                                  }
                                },
                                "id": 41039,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5015:6:95",
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "4991:30:95",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "hexValue": "31",
                                "id": 41040,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "5024:1:95",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1_by_1",
                                  "typeString": "int_const 1"
                                },
                                "value": "1"
                              },
                              "src": "4991:34:95",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 41042,
                              "name": "assetId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 41007,
                              "src": "5027:7:95",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint64",
                                "typeString": "uint64"
                              }
                            ],
                            "id": 41034,
                            "name": "_acceptAsset",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32559,
                            "src": "4969:12:95",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_uint64_$returns$__$",
                              "typeString": "function (uint256,uint256,uint64)"
                            }
                          },
                          "id": 41043,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4969:66:95",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 41044,
                        "nodeType": "ExpressionStatement",
                        "src": "4969:66:95"
                      }
                    ]
                  }
                }
              ]
            },
            "baseFunctions": [
              32201
            ],
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_afterAddAssetToToken",
            "nameLocation": "4357:21:95",
            "overrides": {
              "id": 41011,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4487:8:95"
            },
            "parameters": {
              "id": 41010,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41005,
                  "mutability": "mutable",
                  "name": "tokenId",
                  "nameLocation": "4396:7:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 41048,
                  "src": "4388:15:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41004,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4388:7:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41007,
                  "mutability": "mutable",
                  "name": "assetId",
                  "nameLocation": "4420:7:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 41048,
                  "src": "4413:14:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 41006,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "4413:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41009,
                  "mutability": "mutable",
                  "name": "replacesAssetWithId",
                  "nameLocation": "4444:19:95",
                  "nodeType": "VariableDeclaration",
                  "scope": 41048,
                  "src": "4437:26:95",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 41008,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "4437:6:95",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4378:91:95"
            },
            "returnParameters": {
              "id": 41012,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4496:0:95"
            },
            "scope": 41049,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 40837,
              "name": "RMRKImplementationBase",
              "nameLocations": [
                "421:22:95"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 41230,
              "src": "421:22:95"
            },
            "id": 40838,
            "nodeType": "InheritanceSpecifier",
            "src": "421:22:95"
          },
          {
            "baseName": {
              "id": 40839,
              "name": "RMRKMinifiedEquippable",
              "nameLocations": [
                "449:22:95"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 33350,
              "src": "449:22:95"
            },
            "id": 40840,
            "nodeType": "InheritanceSpecifier",
            "src": "449:22:95"
          }
        ],
        "canonicalName": "RMRKAbstractEquippable",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 40836,
          "nodeType": "StructuredDocumentation",
          "src": "250:122:95",
          "text": " @title RMRKAbstractEquippable\n @author RMRK team\n @notice Abstract implementation of RMRK equipable module."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          41049,
          33350,
          28541,
          28682,
          34868,
          35078,
          27796,
          28205,
          41230,
          28413,
          28193,
          37419,
          33446
        ],
        "name": "RMRKAbstractEquippable",
        "nameLocation": "391:22:95",
        "scope": 41050,
        "usedErrors": [
          33549,
          33552,
          33555,
          33561,
          33564,
          33570,
          33576,
          33579,
          33582,
          33585,
          33588,
          33594,
          33597,
          33603,
          33606,
          33621,
          33627,
          33630,
          33639,
          33645,
          33648,
          33655,
          33670,
          33673,
          33676,
          33679,
          33682,
          33685,
          33688,
          33691,
          33706,
          33709,
          33712,
          33721,
          33724,
          33742,
          33745,
          33748,
          33751,
          33754,
          33757,
          33763,
          33766,
          33769,
          33772,
          33781,
          37372
        ],
        "usedEvents": [
          27695,
          27704,
          27713,
          28225,
          28232,
          28584,
          28599,
          28608,
          34700,
          34710,
          34719,
          34726,
          34731,
          34740,
          34749,
          34893,
          34904,
          34915,
          34920,
          34935
        ]
      }
    ],
    "license": "Apache-2.0"
  },
  "id": 95
}